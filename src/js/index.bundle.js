/*! For license information please see index.bundle.js.LICENSE.txt */
(()=>{"use strict";var __webpack_modules__={"./src/ts/abstract/consolepoem.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "ConsolePoem": () => (/* binding */ ConsolePoem)\n/* harmony export */ });\n/**\n * Poem construct to output to console because folks love looking at console.\n */\nvar SITE_POEM;\n(function (SITE_POEM) {\n    SITE_POEM["WORD_FROM_OUR_SPONSOR"] = "A WORD FROM OUR SPONSOR";\n    SITE_POEM["START_DASHED_LINE"] = "          -----        ";\n    SITE_POEM["LINE_1"] = "These violent delights have violent ends";\n    SITE_POEM["LINE_2"] = "And in their triumph die, like fire and powder,";\n    SITE_POEM["LINE_3"] = "Which as they kiss consume: the sweetest honey";\n    SITE_POEM["LINE_4"] = "Is loathsome in his own deliciousness";\n    SITE_POEM["LINE_5"] = "And in the taste confounds the appetite:";\n    SITE_POEM["LINE_6"] = "Therefore love moderately; long love doth so;";\n    SITE_POEM["LINE_7"] = "Too swift arrives as tardy as too slow.";\n    SITE_POEM["END_DASHED_LINE"] = "          -----        ";\n})(SITE_POEM || (SITE_POEM = {}));\n/**\n * ConsolePoem abstract Class with the simple taslks of printing a poem to\n * console. Used previously across sites once in Production.\n * ! This is ideally used after the site has completedly loaded with no\n * ! errors or warnings and the console is bare in production.\n *\n * ! Post-Load Error Handling is handled gracefully by an error manager\n * ! handling with appropriate messaging upon catch / throws.\n */\nclass ConsolePoem {\n    /**\n     * Takes the defined site poem data structure and outputs to the console\n     * line by line.\n     */\n    static publish() {\n        let poem = \'\\n\';\n        for (const line of Object.values(SITE_POEM)) {\n            poem += line + \'\\n\';\n        }\n        console.log(poem);\n    }\n}\n\n\n//# sourceURL=webpack://coderesonsibly/./src/ts/abstract/consolepoem.ts?')},"./src/ts/abstract/elementassist.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ElementAssist\": () => (/* binding */ ElementAssist)\n/* harmony export */ });\n/**\n * Abstract Class that takes an HTMLElement or provides access to the global\n * windoe object to contrain overuse.\n *\n * The purpose of this class is to map property names and calculated values to\n * JQuery's similarly named  methods and properties not readily available in TypeScript.\n * Thereby removing the need to import JQuery to simply access methods, parameters\n * we've become very accustomed to using in everyday applicable use.\n *\n * For example: $window.scrollTop does not exist on this.window.\n * $('element').width() does not return the same value as element.clientWidth,\n * offsetWidth, or scrollWidth.\n */\nclass ElementAssist {\n    static window() {\n        const windowParams = {\n            scrollTop: window.scrollY,\n            height: window.innerHeight,\n        };\n        return windowParams;\n    }\n    /**\n     * Calcultes the top and left values of an HTML Elemnt as JQuery.\n     * @param element the html element to get the correct top and left coordinates\n     * that aligns to JQuery.\n     * @returns the position data structure of top and left values for the element.\n     */\n    static position(element) {\n        const parentRect = (element.offsetParent &&\n            element.offsetParent.getBoundingClientRect()) || { top: 0, left: 0 };\n        const elemRect = element.getBoundingClientRect();\n        const coordinates = {\n            top: elemRect.top - parentRect.top,\n            left: elemRect.left - parentRect.left,\n        };\n        return coordinates;\n    }\n    /**\n     * Calcultes the width and height values of an HTML Elemnt similar to JQuery\n     * by taking into account the border and padding width and height.\n     * @param element the html element to get the correct top and left coordinates\n     * that aligns to JQuery.\n     * @returns the size data structure of width and height values for the element.\n     */\n    static size(element) {\n        const cs = getComputedStyle(element);\n        const paddingX = parseFloat(cs.paddingLeft) + parseFloat(cs.paddingRight);\n        const paddingY = parseFloat(cs.paddingTop) + parseFloat(cs.paddingBottom);\n        const borderX = parseFloat(cs.borderLeftWidth) + parseFloat(cs.borderRightWidth);\n        const borderY = parseFloat(cs.borderTopWidth) + parseFloat(cs.borderBottomWidth);\n        const sizeHeight = parseFloat(cs.height);\n        const sizeWidth = parseFloat(cs.width);\n        const size = {\n            width: sizeWidth - paddingX - borderX,\n            height: sizeHeight - paddingY - borderY,\n        };\n        return size;\n    }\n    /**\n     * Allows access to to the scrolltop value, aligning to JQuery's\n     * $(window).scrollTop.\n     * @returns the vertical scroll value of the window object.\n     */\n    static windowScrollTop() {\n        return window.scrollY;\n    }\n}\n\n\n//# sourceURL=webpack://coderesonsibly/./src/ts/abstract/elementassist.ts?")},"./src/ts/abstract/typeguard.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TypeGuard\": () => (/* binding */ TypeGuard)\n/* harmony export */ });\n/**\n * Non-Instantiatable Class that allows for a while range of Safe Checks\n * & Type Guards across basic and advanced data types.\n *\n */\nclass TypeGuard {\n    /**\n     * Assigns an unknown type to the expected data type.\n     * @param t the requested Instantiatable data type.\n     * @returns the instance of t\n     */\n    static cast(t) {\n        return t;\n    }\n    /**\n     * Checks to see if the unknown instance belongs to the expected Data Type\n     * @param TheClass The expected Data Type we believe the object is\n     * @param obj the unknown instance of a data type\n     * @returns the unknown object as an instance of the passed Data Type,\n     * otherwise, a logicial Error is thrown.\n     */\n    static assertInstance(TheClass, obj) {\n        if (!(obj instanceof TheClass)) {\n            throw Error('Code Responsibly Type Guard Error: Value passed is not an instance of ' +\n                TheClass);\n        }\n        return obj;\n    }\n    /**\n     * Checks the instance if it is Null or Undefined.\n     * @param value instance to check against nullable data.\n     * @returns nonnullable value if it is in fact not empty or throws an error.\n     */\n    static guardForNull(value) {\n        this.assertValueEmpty(value);\n        return value;\n    }\n    /**\n     * Checks against Null or Undefined.  Not to be used for string data type.\n     * @param value instance to check against nullable data.\n     * @returns true if the value is empty\n     */\n    static isValueEmpty(value) {\n        return value == null || value == undefined ? true : false;\n    }\n    /**\n     * Assets if the value is Null and only throws an error.\n     * Method meets conditions for GTS / ESLint to guard against null.\n     * @param value instance to check against nullable data.\n     */\n    static assertValueEmpty(value) {\n        if (value == null || value == undefined) {\n            throw Error('Code Responsibly Type Guard Error:' + value);\n        }\n    }\n}\n\n\n//# sourceURL=webpack://coderesonsibly/./src/ts/abstract/typeguard.ts?")},"./src/ts/app.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _components_coderesponsibly__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @components/coderesponsibly */ "./src/ts/components/coderesponsibly.ts");\n\n/**\n * Initialziing of CodeResponsibly, subclass of site.ts,\n * on window load\n */\nwindow.onload = function () {\n    const sitev9 = new _components_coderesponsibly__WEBPACK_IMPORTED_MODULE_0__.CodeResponsibly();\n    sitev9.init();\n};\n\n\n//# sourceURL=webpack://coderesonsibly/./src/ts/app.ts?')},"./src/ts/base/component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Component\": () => (/* binding */ Component)\n/* harmony export */ });\n/* harmony import */ var _base_events_anchorevent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @base/events/anchorevent */ \"./src/ts/base/events/anchorevent.ts\");\n/* harmony import */ var _base_coreelement__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @base/coreelement */ \"./src/ts/base/coreelement.ts\");\n/* harmony import */ var _base_constants_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @base/constants/types */ \"./src/ts/base/constants/types.ts\");\n/* harmony import */ var _abstract_typeguard__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @abstract/typeguard */ \"./src/ts/abstract/typeguard.ts\");\n\n\n\n\n/**\n * A Component Class is defined as one or more containers with key\n * modular functionality that all compoents can subclass and share\n * commonality.\n */\nclass Component extends _base_coreelement__WEBPACK_IMPORTED_MODULE_1__.CoreElement {\n    /**\n     * subclassing CoreElement -> EventTarget.\n     * @param elementID the indentifier to search for marking the main container\n     * of the component.\n     */\n    constructor(elementID = '') {\n        super(elementID);\n    }\n    /**\n     * gets a complex data structure of TCoreContainer which contains\n     * head:HTMLElement, children: HTMLElement[].\n     */\n    get container() {\n        return this._container;\n    }\n    /**\n     * Sets the complex data structure or takes a string that gets passed to the\n     * superclass setter that handles defining the TCoreContainer.\n     */\n    set container(val) {\n        if (this.container !== undefined) {\n            this.removeLinkListeners();\n        }\n        super.container = val;\n    }\n    /**\n     * returns any links identified at the component level.\n     */\n    get links() {\n        return this._links;\n    }\n    /**\n     * Looks for all the anchor elements in a collection, stores them for later\n     * references, and applys necessary listeners to all anchor tags dound.\n     * @param collectionID the parent tag that has a collection of anchor tags.\n     * @param allowActiveStateToggle if set true, will pass the active class to\n     * any future selected item, and remove the active class if exists on any\n     * anchor elements within the same collection.\n     */\n    setLinks(collectionID, allowActiveStateToggle = false) {\n        this.removeLinkListeners();\n        this.toggleGrouping = allowActiveStateToggle;\n        this._links = [];\n        const containers = this.getAllContainers();\n        for (let i = 0; i < containers.length; i++) {\n            const returnedLinks = containers[i].querySelectorAll(collectionID + ' a');\n            for (const link of returnedLinks) {\n                this.links.push(link);\n            }\n        }\n        this.applyLinkListeners(collectionID);\n        this.collectionID = collectionID;\n    }\n    /**\n     * Looks at collection of nested links by tag type and sets the active class\n     * to the selected HTMLAchnorElement.\n     * @param parentLinkID the tag name that includes a collection of children\n     * anchor tags\n     * @param selected the selected item within the collection.\n     * @returns null if a collection has not be set\n     */\n    setActiveForSelected(parentLinkID, selected) {\n        const containers = this.getAllContainers();\n        let selectedGroup = null;\n        for (let i = 0; i < containers.length; i++) {\n            if (containers[i].contains(selected)) {\n                selectedGroup = containers[i];\n                break;\n            }\n        }\n        if (!selectedGroup) {\n            return;\n        }\n        const activeLinks = selectedGroup.querySelectorAll(parentLinkID + ' a.active');\n        if (activeLinks) {\n            for (const link of activeLinks) {\n                link.classList.toggle('active');\n            }\n        }\n        selected.classList.toggle('active');\n    }\n    /**\n     * Removes anty pre-existing link listeners and re-applies listeners.\n     * Ideally, this is for when a new collection is being addressed.\n     */\n    applyListeners() {\n        if (this.linklisteners) {\n            this.removeLinkListeners();\n        }\n        this.applyLinkListeners(this.collectionID);\n    }\n    /**\n     * Adds listeners if HTMLAnchorElements are set.\n     * @param collectionID the parent tag that has a collection of children\n     * anchor tags.\n     * @returns null if there are no links found or collection tag of possible\n     * children anchor tags was not set.\n     */\n    applyLinkListeners(collectionID) {\n        if (this.linklisteners) {\n            this.removeLinkListeners();\n        }\n        if (!this.links || collectionID === undefined) {\n            return;\n        }\n        this.linklisteners = [];\n        for (let i = 0; i < this.links.length; i++) {\n            const listener = (event) => this.activeLinkHandler(event, collectionID);\n            this.links[i].addEventListener(_base_constants_types__WEBPACK_IMPORTED_MODULE_2__.WEB_EVENT_TYPES.CLICK, listener);\n            this.linklisteners.push(listener);\n        }\n    }\n    /**\n     * Removes any listeners at the component element.\n     */\n    removeListeners() {\n        this.removeLinkListeners();\n    }\n    /**\n     * Removes any existing listeners attached to links belonging to a collection\n     * @returns null if there are no listeners\n     */\n    removeLinkListeners() {\n        if (!this.linklisteners || this.linklisteners.length === 0) {\n            return;\n        }\n        for (let i = 0; i < this.linklisteners.length; i++) {\n            this.links[i].removeEventListener(_base_constants_types__WEBPACK_IMPORTED_MODULE_2__.WEB_EVENT_TYPES.CLICK, this.linklisteners[i]);\n        }\n        this.linklisteners = [];\n        this._links = [];\n    }\n    /**\n     * Checks an HTMLAnchorElement to see if the class attribute has passed a\n     * special class to force prevent-default action.\n     * !There are only two special classes  typescript checks for to determine\n     * !extended functionality: 'prevent-default' and 'mobile-ready'.\n     * @param link the Anchor Element to check if 'prevent-default' is assigned.\n     * @returns true if the special class of prevent-default exists.\n     */\n    checkForPreventDefaultClass(link) {\n        if (link.classList == undefined) {\n            return false;\n        }\n        return link.classList.contains('prevent-default') ? true : false;\n    }\n    /**\n     * the handler for when an anchor tag is selected. Checks to see if\n     * preventDefault exists at the class attribute level of the element or if\n     * the parameter forces preventDefault, then dispatches an event to notify\n     * the parent class that a selection has been made within the instaniated\n     * component.\n     * @param event MouseEvent.CLICK\n     * @param parentLinkID the parent tag that has a collection of anchor tags.\n     * @param preventDefault if the selected anchor element should prevent\n     * default action.\n     */\n    activeLinkHandler(event, parentLinkID, preventDefault = false) {\n        const selectedLink = _abstract_typeguard__WEBPACK_IMPORTED_MODULE_3__.TypeGuard.cast(event.currentTarget);\n        const preventDefaultHTMLFlag = this.checkForPreventDefaultClass(selectedLink);\n        if (preventDefaultHTMLFlag === true || preventDefault === true) {\n            event.preventDefault();\n            const hrefAttribute = _abstract_typeguard__WEBPACK_IMPORTED_MODULE_3__.TypeGuard.guardForNull(selectedLink.getAttribute('href'));\n            const sectionRequested = hrefAttribute.substring(1);\n            this.dispatchEvent(new _base_events_anchorevent__WEBPACK_IMPORTED_MODULE_0__.AnchorEvent(_base_events_anchorevent__WEBPACK_IMPORTED_MODULE_0__.AnchorEvent.NOTIFY_SELECTION, {\n                detail: { sectionRequested: sectionRequested },\n            }));\n        }\n        if (this.toggleGrouping) {\n            this.setActiveForSelected(parentLinkID, selectedLink);\n        }\n    }\n}\n\n\n//# sourceURL=webpack://coderesonsibly/./src/ts/base/component.ts?")},"./src/ts/base/constants/types.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "HTML_TAGS": () => (/* binding */ HTML_TAGS),\n/* harmony export */   "SITE_CONFIG": () => (/* binding */ SITE_CONFIG),\n/* harmony export */   "SITE_STATE": () => (/* binding */ SITE_STATE),\n/* harmony export */   "SectionKeys": () => (/* binding */ SectionKeys),\n/* harmony export */   "WEB_EVENT_TYPES": () => (/* binding */ WEB_EVENT_TYPES)\n/* harmony export */ });\nvar HTML_TAGS;\n(function (HTML_TAGS) {\n    HTML_TAGS["BODY"] = "body";\n    HTML_TAGS["SVG"] = "svg";\n    HTML_TAGS["HEADER"] = "header";\n    HTML_TAGS["SECTION"] = "section";\n})(HTML_TAGS || (HTML_TAGS = {}));\nvar SectionKeys;\n(function (SectionKeys) {\n    SectionKeys["HOME"] = "home";\n    SectionKeys["ABOUT"] = "hello";\n    SectionKeys["DOWNLOAD_ME"] = "download-codebase";\n    SectionKeys["RULES"] = "leadership-philosophy";\n    SectionKeys["SPORTS_SCIENCE"] = "sports-science-analytics";\n    SectionKeys["PERSONALS"] = "the-personals";\n    SectionKeys["WORK_HISTORY"] = "career-path";\n})(SectionKeys || (SectionKeys = {}));\nvar SITE_STATE;\n(function (SITE_STATE) {\n    SITE_STATE["DESKTOP"] = "desktop";\n    SITE_STATE["NOT_DESKTOP"] = "not-desktop";\n    SITE_STATE["NONE"] = "";\n})(SITE_STATE || (SITE_STATE = {}));\nconst SITE_CONFIG = {\n    SITE_MODE: SITE_STATE.NONE,\n};\nvar WEB_EVENT_TYPES;\n(function (WEB_EVENT_TYPES) {\n    WEB_EVENT_TYPES["ON_BEFORE_UNLOAD"] = "onbeforeunload";\n    WEB_EVENT_TYPES["SCROLL"] = "scroll";\n    WEB_EVENT_TYPES["RESIZE"] = "resize";\n    WEB_EVENT_TYPES["MOUSE_MOVE"] = "mousemove";\n    WEB_EVENT_TYPES["MOUSE_ENTER"] = "mouseenter";\n    WEB_EVENT_TYPES["MOUSE_OUT"] = "mouseout";\n    WEB_EVENT_TYPES["MOUSE_OVER"] = "mouseover";\n    WEB_EVENT_TYPES["MOUSE_LEAVE"] = "mouseleave";\n    WEB_EVENT_TYPES["CLICK"] = "click";\n    WEB_EVENT_TYPES["OPEN_MENU"] = "open-menu";\n    WEB_EVENT_TYPES["ANIMATION_ENDED"] = "animationend";\n    WEB_EVENT_TYPES["TRANSITION_RUN"] = "transitionrun";\n    WEB_EVENT_TYPES["TRANSITION_END"] = "transitionend";\n    WEB_EVENT_TYPES["WHEEL"] = "wheel";\n    WEB_EVENT_TYPES["TOUCH_START"] = "touchstart";\n    WEB_EVENT_TYPES["TOUCH_MOVE"] = "touchmove";\n})(WEB_EVENT_TYPES || (WEB_EVENT_TYPES = {}));\n/*\nexport type TSectionKeys =\n  | \'home\'\n  | \'about\'\n  | \'download-me\'\n  | \'sports-science-analytics\'\n  | \'personals\'\n  | \'work-history\';\n\n  export type TComponents = {\n  [K in TSectionKeys]?: TSectionValues\n};\n*/\n\n\n//# sourceURL=webpack://coderesonsibly/./src/ts/base/constants/types.ts?')},"./src/ts/base/coreelement.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CoreElement\": () => (/* binding */ CoreElement)\n/* harmony export */ });\n/* harmony import */ var _abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @abstract/typeguard */ \"./src/ts/abstract/typeguard.ts\");\n/* harmony import */ var _base_constants_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @base/constants/types */ \"./src/ts/base/constants/types.ts\");\n\n\n/**\n * A CoreElement Class is defined as one or more containers with key\n * modular functionality that all compoents can subclass and share\n * commonality.\n */\nclass CoreElement extends EventTarget {\n    /**\n     * subclassing EventTarget.\n     * @param elementID the indentifier to search for marking the top-most\n     * container which indicates to the app is a valid section.\n     */\n    constructor(elementID = '') {\n        super();\n        //Does this element belong to a common set of items such as li tag.\n        this.belongsToSeries = false;\n        this.mobileClickListeners = [];\n        this.mobileMouseLeaveListeners = [];\n        this.mobileReadyElements = [];\n        if (elementID !== '') {\n            this.container = elementID;\n            if (this.container.children) {\n                this.belongsToSeries = true;\n                this.seriesKey = elementID;\n            }\n        }\n    }\n    /**\n     * gets a complex data structure of TCoreContainer which contains\n     * head:HTMLElement, children: HTMLElement[].\n     */\n    get container() {\n        return this._container;\n    }\n    /**\n     * Sets the complex data structure or takes a string that gets passed to\n     * handle setting up container as a proper data type of TCoreContainer.\n     */\n    set container(val) {\n        this._container =\n            typeof val === 'string'\n                ? _abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.guardForNull(this.getQualifiedSelector(val))\n                : val;\n        this.removeMobileHoverClickListeners();\n        this.applyMobileHoverClickListeners();\n    }\n    /**\n     * Checks to see if a string is a valid class or id in the HTML.\n     * @param searchKey the expected selector that belongs to an element tag.\n     * @returns the searchKey with the correct selector prefix if it is\n     * valid within the HTML.\n     */\n    getValidSelector(searchKey) {\n        const qualifiers = ['', '#', '.'];\n        for (const qualifier of qualifiers) {\n            const updatedElementID = qualifier + searchKey;\n            const temp = document.querySelectorAll(updatedElementID);\n            if (temp !== null && temp instanceof NodeList && temp.length > 0) {\n                return updatedElementID;\n            }\n        }\n        return undefined;\n    }\n    /**\n     * Checks to see if a string is a valid class or id in the HTML.\n     * @param searchKey the expected class or id that belongs to an element tag.\n     * @returns true if the selector is valid in the HTML.\n     */\n    doesSelectorQualify(searchKey) {\n        const elementKey = this.getValidSelector(searchKey);\n        if (elementKey == undefined) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Checks the string for proper formatting of a css selector and then tests\n     * to see if the key exists in the HTML as a proper identifier of a single\n     * or series of elements.\n     * @param searchKey the expected class or id that belongs to an element tag.\n     * @returns all occurrences, if any, of TCoreContainer that includes a\n     * single occurence(TCoreContainer.head) or multiple occurrences\n     * (TCoreContainer.children).\n     *\n     * ! Head will always be assigned the first occurence whether it is\n     * ! at the top-most containet level or the first child that has the\n     * ! classname or id attribute.\n     */\n    getQualifiedSelector(searchKey) {\n        const elementID = this.getValidSelector(searchKey);\n        if (elementID == undefined) {\n            return null;\n        }\n        const temp = document.querySelectorAll(elementID);\n        if (temp == null || (temp instanceof NodeList && temp.length === 0)) {\n            return null;\n        }\n        const children = [];\n        switch (temp.length) {\n            case 1:\n                return { head: temp.item(0) };\n            default:\n                for (let i = 1; i < temp.length; i++) {\n                    children.push(temp.item(i));\n                }\n                return { head: temp.item(0), children: children };\n        }\n    }\n    /**\n     * Converts TCoreContainer: head, children[] as an array series of\n     * HTMLElement\n     * @returns a easy to access stack to iterate over all containers that share\n     * the same key instead of using head / children accessors.\n     */\n    getAllContainers() {\n        const allContainers = [];\n        if (this._container.head) {\n            allContainers.push(this._container.head);\n        }\n        if (this._container.children && this._container.children.length > 0) {\n            for (let i = 0; i < this._container.children.length; i++) {\n                allContainers.push(this._container.children[i]);\n            }\n        }\n        return allContainers;\n    }\n    /**\n     * Allows for mobile to experience the desktop hover states when the user\n     * touches the element. Adds the appropriate interaction listeners assigned\n     * to any container that have the class attribute of 'mobile-ready'.\n     *\n     * ! mobile-ready is one of two site-wide class names that extend beyond\n     * ! styling and determine functionality.\n     */\n    applyMobileHoverClickListeners() {\n        const allContainers = this.getAllContainers();\n        for (let i = 0; i < allContainers.length; i++) {\n            const mobileReadyElements = allContainers[i].getElementsByClassName('mobile-ready');\n            for (const element of mobileReadyElements) {\n                const mobileClickListener = (event) => this.mobileClickHandler(event);\n                const mobileMouseLeaveListener = (event) => this.mobileMouseLeaveHandler(event);\n                const assertElement = _abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.assertInstance(HTMLElement, element);\n                assertElement.addEventListener(_base_constants_types__WEBPACK_IMPORTED_MODULE_1__.WEB_EVENT_TYPES.CLICK, mobileClickListener);\n                this.mobileClickListeners.push(mobileClickListener);\n                assertElement.addEventListener(_base_constants_types__WEBPACK_IMPORTED_MODULE_1__.WEB_EVENT_TYPES.MOUSE_LEAVE, mobileMouseLeaveListener);\n                this.mobileMouseLeaveListeners.push(mobileMouseLeaveListener);\n                this.mobileReadyElements.push(assertElement);\n            }\n        }\n    }\n    /**\n     * Removes listeners that enable the mobile experience of users touch\n     * enabling the hover states assigned to any container that has the class\n     * attribute of 'mobile-ready'.\n     *\n     * ! mobile-ready is one of two site-wide class names that extend beyond\n     * ! styling and determine functionality.\n     */\n    removeMobileHoverClickListeners() {\n        for (let i = 0; i < this.mobileReadyElements.length; i++) {\n            this.mobileReadyElements[i].removeEventListener(_base_constants_types__WEBPACK_IMPORTED_MODULE_1__.WEB_EVENT_TYPES.CLICK, this.mobileClickListeners[i]);\n            this.mobileReadyElements[i].removeEventListener(_base_constants_types__WEBPACK_IMPORTED_MODULE_1__.WEB_EVENT_TYPES.MOUSE_LEAVE, this.mobileMouseLeaveListeners[i]);\n        }\n    }\n    /**\n     * Uses a partial  match to search for a potential class name. If found,\n     * removes the class name from the elements classlist.\n     * @param element element to test the search against\n     * @param prefix the partial matich of the class name we're looking for\n     */\n    removeClassByPrefix(element, prefix) {\n        const cssList = element.classList.toString();\n        if (!cssList) {\n            return;\n        }\n        const r = new RegExp(/(^|\\s)placeholder\\S+/g);\n        const newRE = new RegExp(r.source.replace('placeholder', prefix), 'g');\n        let returnedClass = (cssList.match(newRE) || []).join(' ');\n        if (returnedClass === '') {\n            return;\n        }\n        returnedClass = returnedClass.trim();\n        element.classList.remove(returnedClass);\n    }\n    /**\n     * The handler toggles mobile-click which is tied to our hover states in\n     * CSS. This is to mimic the functionality of mouse_over and mouse_leave on\n     * mobile devices.\n     * @param event MouseEvent.CLICK\n     */\n    mobileClickHandler(event) {\n        event.currentTarget.classList.toggle('mobile-click');\n    }\n    /**\n     * The handler remove the mobile-click class to mimic the mouse_leave\n     * or 'hover off' functionality available on desktop.\n     * @param event MouseEvent.MOUSE_LEAVE\n     */\n    mobileMouseLeaveHandler(event) {\n        event.currentTarget.classList.remove('mobile-click');\n    }\n}\n\n\n//# sourceURL=webpack://coderesonsibly/./src/ts/base/coreelement.ts?")},"./src/ts/base/events/anchorevent.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AnchorEvent\": () => (/* binding */ AnchorEvent)\n/* harmony export */ });\n/**\n * CustomEvent Class For Anchor Tag. A Proper Example to extend Custom\n * Event to dispatch Events with instantiable custom types.\n * Meant to meet strict ES6 rules.\n */\nclass AnchorEvent extends CustomEvent {\n    /**\n     * Instantiate similarily to CustomEvent\n     * @param typeName the type name should be the reasonly properties\n     * in this class.\n     * @param init The Expected subclass of CustomEventInit to pass\n     *  paremeters around.\n     */\n    constructor(typeName, init) {\n        super(typeName, init);\n        this.init = init;\n    }\n}\n// Dispatchable Event Type\nAnchorEvent.NOTIFY_SELECTION = 'anchor-item-selected';\n\n\n//# sourceURL=webpack://coderesonsibly/./src/ts/base/events/anchorevent.ts?")},"./src/ts/base/events/siteevent.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SiteEvent\": () => (/* binding */ SiteEvent)\n/* harmony export */ });\n/**\n * Custom Event Class For Top Level Site Application. A Proper Example\n * to extend Custom Event to dispatch Events with instantiable custom types.\n * Meant to meet strict ES6 rules.\n */\nclass SiteEvent extends CustomEvent {\n    /**\n     * Instantiate similarily to CustomEvent\n     * @param typeName the type name should be the reasonly properties\n     * in this class.\n     * @param init optional. Takes the subclass of CustomEventInit to meet\n     * the super class constructor defition.\n     */\n    constructor(typeName, init) {\n        super(typeName, init);\n        if (init) {\n            this.init = init;\n        }\n    }\n}\n// Dispatchable Event Type\nSiteEvent.TRACK_CLICK = 'site-link-clicked';\nSiteEvent.SECTION_OUTRO = 'section-outro';\nSiteEvent.SECTION_INTRO = 'section-intro';\n\n\n//# sourceURL=webpack://coderesonsibly/./src/ts/base/events/siteevent.ts?")},"./src/ts/base/overlayanimation.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"OverlayAnimation\": () => (/* binding */ OverlayAnimation)\n/* harmony export */ });\n/* harmony import */ var _abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @abstract/typeguard */ \"./src/ts/abstract/typeguard.ts\");\n/* harmony import */ var _base_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @base/component */ \"./src/ts/base/component.ts\");\n/* harmony import */ var _base_constants_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @base/constants/types */ \"./src/ts/base/constants/types.ts\");\n\n\n\n/**\n * Single Animation (Not Transition*) allows for an element to have an intro,\n * rollover and rollout animation classes along with support for mouse-over /\n * mouse-out transition styles.\n */\nclass OverlayAnimation extends _base_component__WEBPACK_IMPORTED_MODULE_1__.Component {\n    /**\n     * subclassing Component -> CoreElement.\n     * @param elementID the indentifier to search for marking the main container\n     * of the component.\n     */\n    constructor(elementID = '') {\n        super(elementID);\n        this.animationInProgress = false;\n        this.onHover = false;\n        this.queueAnimation = false;\n        this.animationInProgressState = '';\n        if (this.container !== undefined) {\n            this.init();\n        }\n    }\n    /**\n     * !required to override the setter while strict-true\n     * gets a complex data structure of TCoreContainer which contains\n     * head:HTMLElement, children: HTMLElement[].\n     */\n    get container() {\n        return super.container;\n    }\n    /**\n     * Forces an assetPath safe guard check before setting container.\n     */\n    set container(element) {\n        if (this.basePath === undefined) {\n            throw Error('-> Base Path Not Set On Single Animation Instance');\n        }\n        super.container = element;\n        this.init();\n    }\n    /**\n     * returns the path of assets, ideally, the current theme's assets.\n     */\n    get assetPath() {\n        return this._assetPath;\n    }\n    /**\n     * Correcly creates the path of the assets by supporting dynamic subfolders\n     */\n    set assetPath(val) {\n        this._assetPath = this.basePath + \"/\" + val;\n    }\n    /**\n     * animates in the component's overlay element if an intro animation class\n     * is set.\n     * @param delay how long should we wait in seconds before animating an intro.\n     */\n    intro(delay = 0) {\n        if (this.introAnimationClass === undefined) {\n            throw Error('-> Intro Animation Class Not Set On Single Animation Instance');\n        }\n        this.onHover = false;\n        this.queueAnimation = false;\n        this.resetAnimation(this.overlay);\n        this.animationInProgress = true;\n        this.overlay.style.animationDelay = delay + 's';\n        this.overlay.classList.add(this.introAnimationClass);\n    }\n    /**\n     * If the theme updates, assumes image paths need to update as different\n     * theme styles for the component may require better looking assets.\n     * @param theme a theme from the Theme Manager or a string value that matches\n     * themes that are defined in CSS Variables.\n     */\n    update(theme, assetPath) {\n        this.activeTheme = theme;\n        this.assetPath = assetPath;\n        this.updateImageSource(this.base, _abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.guardForNull(this.base.dataset.source));\n        this.updateImageSource(this.overlay, _abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.guardForNull(this.overlay.dataset.source));\n    }\n    /**\n     * Adds necessary mouse interaction listeners and listeners relating to\n     * the animation listeners of intro, click,and hover. Holding the reference\n     * to remove if listeners already attached or listeners are being added and\n     * removed as the component enter/exit the viewport.\n     */\n    applyListeners() {\n        if (this.mouseEventListener != null) {\n            this.removeListeners();\n        }\n        this.mouseEventListener = (event) => this.onMouseInteraction(event);\n        this.introAnimationEventListener = (event) => this.introAnimationComplete(event);\n        this.hoverAnimationEventListener = (event) => this.hoverAnimationComplete(event);\n        this.container.head.addEventListener(_base_constants_types__WEBPACK_IMPORTED_MODULE_2__.WEB_EVENT_TYPES.MOUSE_ENTER, this.mouseEventListener);\n        this.container.head.addEventListener(_base_constants_types__WEBPACK_IMPORTED_MODULE_2__.WEB_EVENT_TYPES.MOUSE_LEAVE, this.mouseEventListener);\n        this.container.head.addEventListener(_base_constants_types__WEBPACK_IMPORTED_MODULE_2__.WEB_EVENT_TYPES.CLICK, this.mouseEventListener);\n        this.overlay.addEventListener(_base_constants_types__WEBPACK_IMPORTED_MODULE_2__.WEB_EVENT_TYPES.ANIMATION_ENDED, this.introAnimationEventListener);\n    }\n    /**\n     * remove all mouse interaction and animation listeners.\n     */\n    removeListeners() {\n        this.overlay.removeEventListener(_base_constants_types__WEBPACK_IMPORTED_MODULE_2__.WEB_EVENT_TYPES.ANIMATION_ENDED, this.introAnimationEventListener);\n        this.overlay.removeEventListener(_base_constants_types__WEBPACK_IMPORTED_MODULE_2__.WEB_EVENT_TYPES.ANIMATION_ENDED, this.hoverAnimationEventListener);\n        this.container.head.removeEventListener(_base_constants_types__WEBPACK_IMPORTED_MODULE_2__.WEB_EVENT_TYPES.MOUSE_ENTER, this.mouseEventListener);\n        this.container.head.removeEventListener(_base_constants_types__WEBPACK_IMPORTED_MODULE_2__.WEB_EVENT_TYPES.MOUSE_LEAVE, this.mouseEventListener);\n        this.container.head.removeEventListener(_base_constants_types__WEBPACK_IMPORTED_MODULE_2__.WEB_EVENT_TYPES.CLICK, this.mouseEventListener);\n        this.mouseEventListener = () => { };\n        this.introAnimationEventListener = () => { };\n        this.hoverAnimationEventListener = () => { };\n    }\n    /**\n     * Handler takes care of mouse over, mouse out, and click actions. To prevent\n     * animation skipping on CSS animation keyframes, we check to see if an\n     * animation is in progress and queue it up from when the previous animation\n     * ends.\n     *\n     * !The user can quickly hover on and off the element, and we keep track of the\n     * !the last hover state to know which animation needs to be queued: Over or Off\n     * !state.\n     * @param event MouseEvent.CLICK, MOUSE_ENTER, MOUSE_LEAVE\n     */\n    onMouseInteraction(event) {\n        switch (event.type) {\n            case _base_constants_types__WEBPACK_IMPORTED_MODULE_2__.WEB_EVENT_TYPES.MOUSE_ENTER:\n                this.onHover = true;\n                break;\n            case _base_constants_types__WEBPACK_IMPORTED_MODULE_2__.WEB_EVENT_TYPES.MOUSE_LEAVE:\n                this.onHover = false;\n                break;\n            case _base_constants_types__WEBPACK_IMPORTED_MODULE_2__.WEB_EVENT_TYPES.CLICK:\n                if (this.animationInProgress === false) {\n                    this.onHover = this.onHover === true ? false : true;\n                }\n                break;\n            default:\n                break;\n        }\n        if (this.animationInProgress === true) {\n            this.queueAnimation = true;\n            return;\n        }\n        else {\n            this.animationInProgress = true;\n            this.setHoverTransition();\n            this.setHoverAnimation();\n        }\n    }\n    /**\n     * method to handle all functionality needed to appropriately initialize\n     * the component.\n     */\n    init() {\n        this.preventRepaintReflow();\n        this.applyListeners();\n    }\n    /**\n     * Called once to hold onto elements the component needs to prevent\n     * further dom calls that could result in repaint or reflow.\n     */\n    preventRepaintReflow() {\n        this.base = _abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.guardForNull(this.container.head.querySelector('img:nth-child(1)'));\n        this.overlay = _abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.guardForNull(this.container.head.querySelector('img:nth-child(2)'));\n        this.updateImageSource(this.base, _abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.guardForNull(this.base.dataset.source));\n        this.updateImageSource(this.overlay, _abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.guardForNull(this.overlay.dataset.source));\n    }\n    /**\n     * updates the src tag of an image element.\n     * @param image the image element to be updated.\n     * @param source the image name that belongs in a specific theme folder.\n     */\n    updateImageSource(image, source) {\n        image.src = this.assetPath + '/' + source;\n    }\n    /**\n     * Sets the appropriate hover transition by updating the transform.\n     *\n     * !purposely not using a class for variety purposes as the class already\n     * !uses animation clss as an example.\n     * !SingleTransition uses css class for transition properties as an example.\n     */\n    setHoverTransition() {\n        this.container.head.style.transform =\n            this.onHover === true\n                ? this.rollOverTransitionStyle\n                : this.rollOutTransitionStyle;\n    }\n    /**\n     * Sets the appropriate hover animation by updating the classlist if\n     * a rollout and rollover animation classes have been set.\n     *\n     * The method can also handle queued calls. If the user is hovered and the\n     * animationInProgressState is unhover, we exit gracefully to not disrupt the\n     * animation.\n     * If the user is unhovered and animationInProgressState is hovered, we exit\n     * gracefully to not disrupt the animation.\n     */\n    setHoverAnimation() {\n        if (this.rollOutAnimationClass === undefined) {\n            throw Error('-> Roll Out Animation Class Not Set On Single Animation Instance');\n        }\n        if (this.rollOverAnimationClass === undefined) {\n            throw Error('-> Roll Over Animation Class Not Set On Single Animation Instance');\n        }\n        if (this.onHover === true) {\n            if (this.animationInProgressState === 'hover') {\n                this.animationInProgress = false;\n                return;\n            }\n            this.resetAnimation(this.overlay);\n            this.overlay.classList.remove(this.rollOutAnimationClass);\n            this.overlay.classList.add(this.rollOverAnimationClass);\n            this.animationInProgressState = 'hover';\n        }\n        else {\n            if (this.animationInProgressState === 'unhover') {\n                this.animationInProgress = false;\n                return;\n            }\n            this.resetAnimation(this.overlay);\n            this.overlay.classList.remove(this.rollOverAnimationClass);\n            this.overlay.classList.add(this.rollOutAnimationClass);\n            this.animationInProgressState = 'unhover';\n        }\n    }\n    /**\n     * Handles when the hover animations have completed. If there is\n     * an animation queued,  we set the appropriate transition and\n     * animation states.\n     * @param event AnimationEvent.ANIMATION_ENDED\n     */\n    hoverAnimationComplete(event) {\n        this.animationInProgress = false;\n        if (this.queueAnimation === true) {\n            this.queueAnimation = false;\n            this.animationInProgress = true;\n            this.setHoverTransition();\n            this.setHoverAnimation();\n        }\n    }\n    /**\n     * Handles when the intro animations have completed. Checks to see if there's\n     * a queued animation that happened in the midle of the intro. If so, we\n     * set the appropriate transition and animation states.\n     * @param event AnimationEvent.ANIMATION_ENDED\n     */\n    introAnimationComplete(event) {\n        this.overlay.classList.remove(this.introAnimationClass);\n        this.overlay.removeEventListener(_base_constants_types__WEBPACK_IMPORTED_MODULE_2__.WEB_EVENT_TYPES.ANIMATION_ENDED, this.introAnimationEventListener);\n        this.overlay.addEventListener(_base_constants_types__WEBPACK_IMPORTED_MODULE_2__.WEB_EVENT_TYPES.ANIMATION_ENDED, this.hoverAnimationEventListener);\n        this.animationInProgress = false;\n        if (this.queueAnimation === true) {\n            this.queueAnimation = false;\n            this.setHoverTransition();\n            this.setHoverAnimation();\n        }\n    }\n    /**\n     * Animation reset need to occur after animation classes are added or\n     * removed to the classlist to force reruns.\n     * @param element the element that needs a reflow.\n     */\n    resetAnimation(element) {\n        element.style.animationDelay = '0s';\n        element.style.animationName = 'none';\n        element.offsetHeight;\n        element.style.animationName = '';\n    }\n}\n\n\n//# sourceURL=webpack://coderesonsibly/./src/ts/base/overlayanimation.ts?")},"./src/ts/base/scrollcomponent.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "ScrollComponent": () => (/* binding */ ScrollComponent)\n/* harmony export */ });\n/* harmony import */ var _base_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @base/component */ "./src/ts/base/component.ts");\n\n/**\n * A ScrollComponent Class is defined as one or more containers that depend on\n * an Intersection Observer to intro, outro, or deliver extra functionality\n * based on observer options that may be limited but not exclusively to, for\n * example, an intersection ratio and threshhold being met of any\n * children containers.\n */\nclass ScrollComponent extends _base_component__WEBPACK_IMPORTED_MODULE_0__.Component {\n    /**\n     * subclassing Component -> CoreElement.\n     * @param elementID the indentifier to search for marking the main container\n     * of the component.\n     */\n    constructor(elementID) {\n        super(elementID);\n        this.observerOptions = {\n            rootMargin: \'0px 0px 0px 0px\',\n            threshold: 0.2,\n        };\n        this.init();\n    }\n    /**\n     * method to handle all functionality needed to appropriately initialized\n     * the component. For ScrollComponent, the IntersectionObserve is set up.\n     */\n    init() {\n        this.initObserver();\n    }\n    /**\n     * Sets up the InteserctionObserver and sets an observe to all the containers\n     * within the component.\n     */\n    initObserver() {\n        const callback = (entries, observer) => this.observerCallbackHandler(entries, observer);\n        this.observer = new IntersectionObserver(callback, this.observerOptions);\n        const target = this.getAllContainers();\n        target.forEach(target => this.observer.observe(target));\n    }\n    /**\n     * The handler that checks for when an entry enters into the viewport at\n     * 20% visibility. Animates in the Index Number, the Title, and Copy that\n     * make up the elements of a Single Principle Item.\n     * @param entries A series of items the IntersectionObserver is aware of.\n     * @param observer the IntersectionObserver that chekcs for entries entering\n     * into the viewport.\n     * @todo interface this method(implements IScrollComponent)\n     */\n    observerCallbackHandler(entries, observer) {\n        /** Empty Callback Passed */\n    }\n}\n\n\n//# sourceURL=webpack://coderesonsibly/./src/ts/base/scrollcomponent.ts?')},"./src/ts/base/section.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Section\": () => (/* binding */ Section)\n/* harmony export */ });\n/* harmony import */ var _abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @abstract/typeguard */ \"./src/ts/abstract/typeguard.ts\");\n/* harmony import */ var _base_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @base/component */ \"./src/ts/base/component.ts\");\n\n\n/**\n * A Section Class is defined as the parent container of one or more\n * components. A section is not identified by a section tag, but is primarily\n * the top most parent container with an id attribute or by the top most parent\n * container of an element(component) with an id attribute.\n */\nclass Section extends _base_component__WEBPACK_IMPORTED_MODULE_1__.Component {\n    /**\n     * subclassing Component -> CoreElement.\n     * @param elementID the indentifier to search for marking the top-most\n     * container which indicates to the app is a valid section.\n     */\n    constructor(elementID = '') {\n        super(elementID);\n    }\n    /**\n     * !required to override the setter while strict-true\n     * gets a complex data structure of TCoreContainer which contains\n     * head:HTMLElement, children: HTMLElement[].\n     */\n    get container() {\n        return this._container;\n    }\n    /**\n     * Sets the complex data structure or takes a string that gets passed to the\n     * superclass setter that handles defining the TCoreContainer.\n     * Identifies all sectionElements which are children thart have an ID tag.\n     *\n     * !Elemnts with ID tags should be treated as components, however, as far\n     * !as sections are concerned, components can do whatever they like, sections\n     * !only think of components as nested containers(descendants) with a higher\n     * !level of purpose that contril their own functionality across their own\n     * !children.\n     */\n    set container(val) {\n        super.container = val;\n        this.sectionElements = this.getContainersWithID();\n    }\n    /**\n     * Check for all elements that have an id attribute. The first element found\n     * is treated as the head element. Any additional elements found are treated\n     * as containers even if they are in fact additional components.\n     * @returns A complex data structure that includes the head element\n     * (TSectionItem) and any aidditional children as an optional data\n     * type of TSectionItem.\n     */\n    getContainersWithID() {\n        const allContainers = this.getAllContainers();\n        if (!allContainers) {\n            throw new Error('Error:No Containers Found In Section Component');\n        }\n        let elements = [];\n        for (let i = 0; i < allContainers.length; i++) {\n            elements = [\n                ...elements,\n                ...this.getElementsWithAttribute(allContainers[i], 'id'),\n            ];\n        }\n        const sections = { head: elements[0] };\n        if (elements.length > 1) {\n            sections.children = elements.slice(1);\n        }\n        return sections;\n    }\n    /**\n     * Takes a search key and checks if it exists as an attribute on the passed\n     * element(parent). If it exists, the parent and the id are pushed into the\n     * array. If the search key returns multiple items, they also get pushed into\n     * the array.\n     * !we know the first item of this array will be head, anything additional\n     * !will be considered as children.\n     * @param container the element that is searched for an attribute at its\n     * top-most level of the element's children.\n     * @param search an attribute on the element tag.\n     * @returns a data structure that is made up on an identifier and HTMLElement\n     * pair.\n     */\n    getElementsWithAttribute(container, search) {\n        const items = [];\n        const parentID = container.getAttribute(search);\n        if (parentID != null) {\n            items.push({ id: parentID, element: container });\n        }\n        const element = container.querySelectorAll('*[' + search + ']');\n        if (element === null ||\n            (element instanceof NodeList && element.length === 0)) {\n            return items;\n        }\n        if (element instanceof HTMLElement) {\n            const parentID = _abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.guardForNull(element.getAttribute('id'));\n            items.push({ id: parentID, element: element });\n        }\n        else {\n            for (let i = 0; i < element.length; i++) {\n                const parentID = _abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.guardForNull(element[i].getAttribute('id'));\n                items.push({ id: parentID, element: element.item(i) });\n            }\n        }\n        return items;\n    }\n}\n\n\n//# sourceURL=webpack://coderesonsibly/./src/ts/base/section.ts?")},"./src/ts/base/singletransition.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "SingleTransition": () => (/* binding */ SingleTransition)\n/* harmony export */ });\n/* harmony import */ var _abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @abstract/typeguard */ "./src/ts/abstract/typeguard.ts");\n/* harmony import */ var _base_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @base/component */ "./src/ts/base/component.ts");\n/* harmony import */ var _base_constants_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @base/constants/types */ "./src/ts/base/constants/types.ts");\n\n\n\n/**\n * Single Transition (Not Animations*) allows for an element to have\n * several transition states assigned to it for looping as the user mouses\n * over and off multiple times, for variety purposes.\n */\nclass SingleTransition extends _base_component__WEBPACK_IMPORTED_MODULE_1__.Component {\n    /**\n     * subclassing Component -> CoreElement.\n     * @param elementID the indentifier to search for marking the main container\n     * of the component.\n     */\n    constructor(elementID) {\n        super(elementID);\n        //Determines if transitions will be randomized or in order\n        this.useRandomTransitions = false;\n        this.init();\n    }\n    /**\n     * Stores the transiition styling for later application. Initializes and\n     * populates the transition variations.\n     * @param variantion a data structure descriptor of a type of transition\n     */\n    createTransitions(variantion) {\n        if (!this.transitions) {\n            this.transitions = { selected: 0, variations: [] };\n        }\n        this.transitions.variations.push(variantion);\n    }\n    /**\n     * single method to to handle Mouse Enter, Mouse Leave, and Click states.\n     * elements transform property is set reset on Mouse Leave, however, Mouse\n     * Enter and Click are treated the same and a random or next-in line\n     * transition is applied.\n     * @param event MouseEvent.CLICK / MOUSE_ENTER / MOUSE_LEAVE\n     */\n    animate(event) {\n        const elementTarget = _abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.cast(event.currentTarget);\n        const element = _abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.guardForNull(elementTarget.querySelector(\'img:first-of-type\'));\n        if (event.type === _base_constants_types__WEBPACK_IMPORTED_MODULE_2__.WEB_EVENT_TYPES.MOUSE_ENTER ||\n            event.type === _base_constants_types__WEBPACK_IMPORTED_MODULE_2__.WEB_EVENT_TYPES.CLICK) {\n            const animation = this.useRandomTransitions === true\n                ? this.getRandomTransition()\n                : this.getNextTransition();\n            element.style.transform = animation.transform;\n        }\n        else {\n            element.style.transform = this.resetTransitionStyle;\n        }\n    }\n    /**\n     * method to handle all functionality needed to appropriately initialized\n     * the component. For SingleTransitions, applying the listeners immediately\n     * is dependent-critical for the functionality of the component.\n     */\n    init() {\n        this.applyListeners();\n    }\n    /**\n     * Adds listeners to all (or one) HTML Elements found in the component.\n     */\n    applyListeners() {\n        const containers = this.getAllContainers();\n        for (let i = 0; i < containers.length; i++) {\n            containers[i].addEventListener(_base_constants_types__WEBPACK_IMPORTED_MODULE_2__.WEB_EVENT_TYPES.MOUSE_ENTER, (event) => this.animate(event));\n            containers[i].addEventListener(_base_constants_types__WEBPACK_IMPORTED_MODULE_2__.WEB_EVENT_TYPES.MOUSE_LEAVE, (event) => this.animate(event));\n            containers[i].addEventListener(_base_constants_types__WEBPACK_IMPORTED_MODULE_2__.WEB_EVENT_TYPES.CLICK, (event) => this.animate(event));\n        }\n    }\n    /**\n     * Gets the next transition in the series in circular pattern.\n     * @returns the next applicable transition variation.\n     */\n    getNextTransition() {\n        let selected = this.transitions.selected;\n        selected =\n            selected === this.transitions.variations.length ? 0 : selected + 1;\n        this.transitions.selected = selected;\n        return this.transitions.variations[this.transitions.selected];\n    }\n    /**\n     * Gets the previous transition in the series in circular pattern.\n     * @returns the previous applicable transition variation.\n     */\n    getpreviousTransition() {\n        let selected = this.transitions.selected;\n        selected =\n            selected === 0 ? this.transitions.variations.length - 1 : selected - 1;\n        this.transitions.selected = selected;\n        return this.transitions.variations[this.transitions.selected];\n    }\n    /**\n     * Gets a random transition in the series.\n     * @returns the next random transition variation that does not repeat the\n     * previously selected transition.\n     */\n    getRandomTransition() {\n        let selected = this.transitions.selected;\n        while (selected === this.transitions.selected) {\n            selected = Math.floor(Math.random() * this.transitions.variations.length);\n        }\n        this.transitions.selected = selected;\n        return this.transitions.variations[selected];\n    }\n}\n\n\n//# sourceURL=webpack://coderesonsibly/./src/ts/base/singletransition.ts?')},"./src/ts/base/site.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Site\": () => (/* binding */ Site)\n/* harmony export */ });\n/* harmony import */ var _abstract_elementassist__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @abstract/elementassist */ \"./src/ts/abstract/elementassist.ts\");\n/* harmony import */ var _base_constants_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @base/constants/types */ \"./src/ts/base/constants/types.ts\");\n/* harmony import */ var _abstract_typeguard__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @abstract/typeguard */ \"./src/ts/abstract/typeguard.ts\");\n\n\n\n/**\n * The Site base Class delivers key functionlity to manage full page websites\n */\nclass Site extends EventTarget {\n    /**\n     * subclassing EventTarget. Sets up the site manager, and stores the view\n     * mode of the site whether we're initially in Desktop or non-desktop view.\n     */\n    constructor() {\n        super();\n        // When a section is 25% percent visible, we consider it active and the\n        // previous section no longer active.\n        this.SCROLL_OFFSET = 0.25;\n        // The active section by default is the Home section.\n        this.activeSection = {\n            name: _base_constants_types__WEBPACK_IMPORTED_MODULE_1__.SectionKeys.HOME,\n            scrollPercentage: 0,\n        };\n        this.lastScrollTop = 0;\n        this.site = new Map();\n        this.scrollRestoration();\n        this.setConfig();\n    }\n    /**\n     * When a refresh happens, we start back at the top opposed to allowing\n     * refreshes to load the page in the middle of a section.\n     */\n    scrollRestoration() {\n        if (history.scrollRestoration) {\n            history.scrollRestoration = 'manual';\n        }\n        else {\n            window.addEventListener(_base_constants_types__WEBPACK_IMPORTED_MODULE_1__.WEB_EVENT_TYPES.ON_BEFORE_UNLOAD, (event) => this.onBeforeUnloadHandler(event));\n        }\n    }\n    /**\n     * Stores the view mode of the page by grabbing the CSS global variable.\n     * The page is either in desktop or non-desktop mode.\n     */\n    setConfig() {\n        const r = _abstract_typeguard__WEBPACK_IMPORTED_MODULE_2__.TypeGuard.cast(document.querySelector('html'));\n        const rs = getComputedStyle(r);\n        _base_constants_types__WEBPACK_IMPORTED_MODULE_1__.SITE_CONFIG.SITE_MODE = _abstract_typeguard__WEBPACK_IMPORTED_MODULE_2__.TypeGuard.cast(rs.getPropertyValue('--site-mode').replace(/['\"]+/g, '').trim());\n    }\n    /**\n     * Adds baseline listeners required for full-page websites, such as page\n     * resizes since it changes the scroll percentage and possibly viewport\n     * height effecting all sections.\n     */\n    applyListeners() {\n        window.addEventListener(_base_constants_types__WEBPACK_IMPORTED_MODULE_1__.WEB_EVENT_TYPES.RESIZE, (event) => this.onResizeHandler(event));\n    }\n    /**\n     * Registers the section instance with the website and sets the site manager\n     * map to appropriate section values where we keep track of the:\n     * parent, the top most valid container of a section.\n     * head: the first container in the section which has an id attribute.\n     * children: any additional containers have have an id attribute.\n     * theme: data-theme attribute at the top most container, the parent.\n     * @param args a list of instances that extend the Section base class.\n     */\n    register(...args) {\n        let sectionName;\n        let sectionValues;\n        for (let i = 0; i < args.length; i++) {\n            sectionName = _abstract_typeguard__WEBPACK_IMPORTED_MODULE_2__.TypeGuard.cast(args[i].sectionElements.head.id);\n            const componentHead = args[i].sectionElements.head.element;\n            const componentContainer = _abstract_typeguard__WEBPACK_IMPORTED_MODULE_2__.TypeGuard.guardForNull(this.findTopMostValidContainer(componentHead));\n            sectionValues = {\n                parent: componentContainer,\n                head: args[i].sectionElements.head,\n                children: args[i].sectionElements.children,\n                theme: _abstract_typeguard__WEBPACK_IMPORTED_MODULE_2__.TypeGuard.guardForNull(componentContainer.dataset.theme),\n            };\n            this.site.set(sectionName, sectionValues);\n        }\n    }\n    /**\n     * searches a given element to find the top most valid element which begins\n     * with either a section tag or header tag.\n     *\n     * ! typically this shoudl only be a section tag. However, my hero lives in\n     * ! the header when shrunken so the header tag is also a type of section for\n     * ! this site. Yes, this is easily remedied by changing header tag to a\n     * ! section tag, but prevents the HTML page form having an appropriate\n     * ! header tag.\n     *\n     * @param element the HTMLElement we search for the closet relevant parent.\n     * @returns the valid container type if one is found otherwise, null.\n     */\n    findTopMostValidContainer(element) {\n        const containerTypes = ['header', 'section'];\n        let foundContainer;\n        for (let i = 0; i < containerTypes.length; i++) {\n            foundContainer = element.closest(containerTypes[i]);\n            if (foundContainer) {\n                return foundContainer;\n            }\n        }\n        return null;\n    }\n    /**\n     * Checks each section to see if it is considered active.\n     * @returns the new active section, otherwise, returns the currently active\n     * section.\n     */\n    checkForActiveSection() {\n        let panel;\n        let allElements = [];\n        let section = null;\n        for (panel of this.site.keys()) {\n            const element = _abstract_typeguard__WEBPACK_IMPORTED_MODULE_2__.TypeGuard.guardForNull(this.site.get(panel)).parent;\n            allElements = [];\n            if (element instanceof (Array)) {\n                allElements = element.slice(0);\n            }\n            else {\n                allElements.push(element);\n            }\n            const activePanel = this.activeSection.name;\n            for (let i = 0; i < allElements.length; i++) {\n                if (this.isSectionActive(this.activeSection.name, _abstract_typeguard__WEBPACK_IMPORTED_MODULE_2__.TypeGuard.guardForNull(this.site.get(activePanel)).parent)) {\n                    return this.activeSection;\n                }\n                section = this.isSectionActive(panel, allElements[i]);\n                if (section && section.name !== this.activeSection.name) {\n                    return section;\n                }\n            }\n        }\n        if (!section) {\n            return this.activeSection;\n        }\n        return section;\n    }\n    /**\n     * Checks if a section is active by looking to see if the section meets the\n     * threshhold of being considered so, where the requirment is being 25% or\n     * more visible given the SCROLL_OFFSET.\n     * If a section is in view, we update the scroll percentage while the section\n     * remains active.\n     *\n     * @param panelName the section name to check against the active section's\n     * name.\n     * @param element The HTMLElement to check if it is in view or not.\n     * ! The name of the section(panelName) and HTMLElement should be related.\n     *\n     * @returns TActiveSection which includes the name of the section based on\n     * predefined keys and the scrollPercentage of the active section.\n     */\n    isSectionActive(panelName, element) {\n        let scrollPercentage;\n        if (this.isSectionInView(element, this.SCROLL_OFFSET)) {\n            scrollPercentage = this.updateActiveScrollPercentage(element, this.SCROLL_OFFSET);\n            if (this.activeSection.name === panelName) {\n                this.activeSection.scrollPercentage = scrollPercentage;\n                return this.activeSection;\n            }\n            return { name: panelName, scrollPercentage: scrollPercentage };\n        }\n        return null;\n    }\n    /**\n     * Checks to see if the section (or any element) is actually in view.\n     * @param element HTMLElement we check to see if it has entered into\n     * the viewport\n     * @param offsetRatio if no offset ratio is passed in, the section must be\n     * 100% visible to be considered active.\n     * @returns true if the section is in fact in view by meeting the threshold\n     * otherwise, false.\n     */\n    isSectionInView(element, offsetRatio = 1) {\n        const scopeHeight = _abstract_elementassist__WEBPACK_IMPORTED_MODULE_0__.ElementAssist.size(element).height;\n        const scopeTop = _abstract_elementassist__WEBPACK_IMPORTED_MODULE_0__.ElementAssist.position(element).top;\n        const windowHeight = _abstract_elementassist__WEBPACK_IMPORTED_MODULE_0__.ElementAssist.window().height;\n        const elementTop = _abstract_elementassist__WEBPACK_IMPORTED_MODULE_0__.ElementAssist.window().scrollTop;\n        const scroll = elementTop + windowHeight * (1 - offsetRatio);\n        if (scopeTop <= scroll && scopeTop + scopeHeight > scroll) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Figures out the correct scroll percentage of an acrtive section given\n     * that the window height can resize, and offset ratio may change across\n     * different sections.\n     * @param element HTMLElement within the viewport now considered active.\n     * @param offsetRatio if no offset ratio is passed in, the section must be\n     * 100% visible to be considered active.\n     * @returns percentage out of a 100 of how much of the section is visible.\n     */\n    updateActiveScrollPercentage(element, offsetRatio = 1) {\n        const scopeHeight = _abstract_elementassist__WEBPACK_IMPORTED_MODULE_0__.ElementAssist.size(element).height;\n        const scopeTop = _abstract_elementassist__WEBPACK_IMPORTED_MODULE_0__.ElementAssist.position(element).top;\n        const windowHeight = _abstract_elementassist__WEBPACK_IMPORTED_MODULE_0__.ElementAssist.window().height;\n        const elementTop = _abstract_elementassist__WEBPACK_IMPORTED_MODULE_0__.ElementAssist.window().scrollTop;\n        const scroll = elementTop + windowHeight * (1 - offsetRatio);\n        let calc = (scroll - scopeTop) / scopeHeight;\n        calc = Math.floor(calc * 100);\n        return calc;\n    }\n    /**\n     * Checks and updates if necessary the view state of the page when a resize\n     * occurs.\n     * @param event  Window Event WEB_EVENT_TYPES.RESIZE.\n     */\n    onResizeHandler(event) {\n        this.setConfig();\n    }\n    /**\n     * Handler that sets the page to the top to prevent refreshes loading the\n     * page in the middle of a section.\n     * @param event Window Event WEB_EVENT_TYPES.ON_BEFORE_UNLOAD.\n     */\n    onBeforeUnloadHandler(event) {\n        window.scrollTo(0, 0);\n    }\n}\n\n\n//# sourceURL=webpack://coderesonsibly/./src/ts/base/site.ts?")},"./src/ts/components/coderesponsibly.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "CodeResponsibly": () => (/* binding */ CodeResponsibly)\n/* harmony export */ });\n/* harmony import */ var _abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @abstract/typeguard */ "./src/ts/abstract/typeguard.ts");\n/* harmony import */ var _base_events_anchorevent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @base/events/anchorevent */ "./src/ts/base/events/anchorevent.ts");\n/* harmony import */ var _base_constants_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @base/constants/types */ "./src/ts/base/constants/types.ts");\n/* harmony import */ var _base_site__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @base/site */ "./src/ts/base/site.ts");\n/* harmony import */ var _base_events_siteevent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @base/events/siteevent */ "./src/ts/base/events/siteevent.ts");\n/* harmony import */ var _components_firestorefetch_events_firebaseevent__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @components/firestorefetch/events/firebaseevent */ "./src/ts/components/firestorefetch/events/firebaseevent.ts");\n/* harmony import */ var _components_nav_nav__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @components/nav/nav */ "./src/ts/components/nav/nav.ts");\n/* harmony import */ var _components_nav_events_navevent__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @components/nav/events/navevent */ "./src/ts/components/nav/events/navevent.ts");\n/* harmony import */ var _components_thememanager_thememanager__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @components/thememanager/thememanager */ "./src/ts/components/thememanager/thememanager.ts");\n/* harmony import */ var _components_thememanager_events_themeevent__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @components/thememanager/events/themeevent */ "./src/ts/components/thememanager/events/themeevent.ts");\n/* harmony import */ var _sections_aboutme_aboutme__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @sections/aboutme/aboutme */ "./src/ts/components/sections/aboutme/aboutme.ts");\n/* harmony import */ var _sections_downloadme_downloadme__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @sections/downloadme/downloadme */ "./src/ts/components/sections/downloadme/downloadme.ts");\n/* harmony import */ var _sections_home_events_heroevent__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @sections/home/events/heroevent */ "./src/ts/components/sections/home/events/heroevent.ts");\n/* harmony import */ var _sections_home_home__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @sections/home/home */ "./src/ts/components/sections/home/home.ts");\n/* harmony import */ var _sections_leadershiplist_leadershipprinciples__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @sections/leadershiplist/leadershipprinciples */ "./src/ts/components/sections/leadershiplist/leadershipprinciples.ts");\n/* harmony import */ var _sections_personals_personals__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @sections/personals/personals */ "./src/ts/components/sections/personals/personals.ts");\n/* harmony import */ var _sections_workhistory_workhistory__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @sections/workhistory/workhistory */ "./src/ts/components/sections/workhistory/workhistory.ts");\n/* harmony import */ var _abstract_consolepoem__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @abstract/consolepoem */ "./src/ts/abstract/consolepoem.ts");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * The main app to initialize on window load. Registers all the sections that\n * need to interact with each other or update based on\n */\nclass CodeResponsibly extends _base_site__WEBPACK_IMPORTED_MODULE_3__.Site {\n    /**\n     * subclasses Site -> EventTarget.\n     * Instaniates the theme manager, all the sections based on allowed keys and\n     * registers the standalone chunk needed for the app.\n     * ! FirestoreFetch along with the frebase depedencies are broken out as\n     * ! a chunk as the functionality is independent of the total experience\n     * ! offered by the site.\n     */\n    constructor() {\n        _abstract_consolepoem__WEBPACK_IMPORTED_MODULE_17__.ConsolePoem.publish();\n        super();\n        this.themeManager = new _components_thememanager_thememanager__WEBPACK_IMPORTED_MODULE_8__.ThemeManager();\n        this.nav = new _components_nav_nav__WEBPACK_IMPORTED_MODULE_6__.Nav();\n        this.home = new _sections_home_home__WEBPACK_IMPORTED_MODULE_13__.Home(_base_constants_types__WEBPACK_IMPORTED_MODULE_2__.SectionKeys.HOME);\n        this.aboutme = new _sections_aboutme_aboutme__WEBPACK_IMPORTED_MODULE_10__.AboutMe(_base_constants_types__WEBPACK_IMPORTED_MODULE_2__.SectionKeys.ABOUT);\n        this.workhistory = new _sections_workhistory_workhistory__WEBPACK_IMPORTED_MODULE_16__.WorkHistory(_base_constants_types__WEBPACK_IMPORTED_MODULE_2__.SectionKeys.WORK_HISTORY);\n        this.personals = new _sections_personals_personals__WEBPACK_IMPORTED_MODULE_15__.Personals(_base_constants_types__WEBPACK_IMPORTED_MODULE_2__.SectionKeys.PERSONALS);\n        this.downloadme = new _sections_downloadme_downloadme__WEBPACK_IMPORTED_MODULE_11__.DownloadMe(_base_constants_types__WEBPACK_IMPORTED_MODULE_2__.SectionKeys.DOWNLOAD_ME);\n        this.myPrinciples = new _sections_leadershiplist_leadershipprinciples__WEBPACK_IMPORTED_MODULE_14__.LeadershipPrinciples(_base_constants_types__WEBPACK_IMPORTED_MODULE_2__.SectionKeys.RULES);\n        this.register(this.home, this.aboutme, this.workhistory, this.personals, this.downloadme, this.myPrinciples);\n        this.setDeviceDefaultState();\n        this.importStandAloneChunk();\n    }\n    /**\n     * If the site loads on non-mobile sizes, we open the nav for the user.\n     * Otherwise, on mobile or smaller resizes, we keep the nav closed.\n     */\n    setDeviceDefaultState() {\n        if (_base_constants_types__WEBPACK_IMPORTED_MODULE_2__.SITE_CONFIG.SITE_MODE === _base_constants_types__WEBPACK_IMPORTED_MODULE_2__.SITE_STATE.DESKTOP) {\n            this.nav.open();\n        }\n        else {\n            this.nav.close();\n        }\n    }\n    /**\n     * Load the FirestoreFetch module. We\'re only using firebase for the\n     * reading and writing the download counter for the Download Codebase\n     * sction of the site. Once loaded, we add the necessary FirestoreFetch\n     * listeners.\n     */\n    async importStandAloneChunk() {\n        const moduleImport = await Promise.all(/*! import() | firestorefetch */[__webpack_require__.e("vendor"), __webpack_require__.e("firestorefetch")]).then(__webpack_require__.bind(__webpack_require__, /*! components/firestorefetch/firestorefetch */ "./src/ts/components/firestorefetch/firestorefetch.ts"));\n        const moduleClass = moduleImport.FirestoreFetch;\n        const fetch = new moduleClass();\n        this.fetch = fetch;\n        this.lazyLoadedListeners();\n    }\n    /**\n     * Sets up the site for on load. Applies necessary mouse listeners,\n     * updates the images needed to match the assigned theme for the work history\n     * section of the site, and checks immediately for which is the active\n     * section since we can deeplink to a section.\n     * If the active section is not the home panel, we close the nav and shrink.\n     */\n    init() {\n        this.applyListeners();\n        this.activeSection = this.checkForActiveSection();\n        this.themeManager.randomize();\n        this.home.hero.intro();\n        switch (this.activeSection.name) {\n            case _base_constants_types__WEBPACK_IMPORTED_MODULE_2__.SectionKeys.HOME:\n                break;\n            default:\n                if (this.home.hero.isShrunk === false) {\n                    this.home.updateHero();\n                }\n        }\n    }\n    /**\n     * Adds listeners to sections and components needed to communicate with each\n     * other.\n     */\n    applyListeners() {\n        super.applyListeners();\n        window.addEventListener(_base_constants_types__WEBPACK_IMPORTED_MODULE_2__.WEB_EVENT_TYPES.SCROLL, event => this.onScrollHandler(event));\n        this.themeManager.addEventListener(_components_thememanager_events_themeevent__WEBPACK_IMPORTED_MODULE_9__.ThemeEvent.UPDATE, (event) => this.updateThemeHandler(_abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.cast(event)));\n        this.themeManager.addEventListener(_components_thememanager_events_themeevent__WEBPACK_IMPORTED_MODULE_9__.ThemeEvent.RANDOM_THEMES_SET, (event) => this.randomThemeHandler(_abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.cast(event)));\n        this.aboutme.addEventListener(_base_events_anchorevent__WEBPACK_IMPORTED_MODULE_1__.AnchorEvent.NOTIFY_SELECTION, (event) => this.sectionRequestHandler(_abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.cast(event)));\n        this.nav.addEventListener(_base_events_anchorevent__WEBPACK_IMPORTED_MODULE_1__.AnchorEvent.NOTIFY_SELECTION, (event) => this.sectionRequestHandler(_abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.cast(event)));\n        this.nav.addEventListener(_components_nav_events_navevent__WEBPACK_IMPORTED_MODULE_7__.NavEvent.OPEN_MENU, (event) => this.menuOpenHandler(_abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.cast(event)));\n        this.home.hero.addEventListener(_sections_home_events_heroevent__WEBPACK_IMPORTED_MODULE_12__.HeroEvent.HERO_ANIMATED, (event) => this.checkHeroHandler(_abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.cast(event)));\n        this.downloadme.addEventListener(_base_events_siteevent__WEBPACK_IMPORTED_MODULE_4__.SiteEvent.TRACK_CLICK, (event) => this.codebaseDownloadedHandler(_abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.cast(event)));\n        this.home.hero.logo.addEventListener(_base_constants_types__WEBPACK_IMPORTED_MODULE_2__.WEB_EVENT_TYPES.CLICK, (event) => this.heroClickHandler(_abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.cast(event)));\n    }\n    /**\n     * set up the delayed listeners and requests for anonymouse user\n     * authentication. Listen for when a record has been fetched so we can update\n     * our Download Codebase Section counter and when authenication is successful\n     * for an anonymouse user.\n     */\n    lazyLoadedListeners() {\n        this.fetch.addEventListener(_components_firestorefetch_events_firebaseevent__WEBPACK_IMPORTED_MODULE_5__.FirebaseEvent.RECORD_FETCHED, (event) => this.recordFetchedHandler(_abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.cast(event)));\n        this.fetch.addEventListener(_components_firestorefetch_events_firebaseevent__WEBPACK_IMPORTED_MODULE_5__.FirebaseEvent.AUTHENTICATED, (event) => this.firebaseAuthHandler(_abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.cast(event)));\n        this.fetch.authenticate();\n    }\n    /**\n     * When the browser is resized, we notify home section of the nav state.\n     * ! if the nav is open on desktop view and we resize to mobile sizes,\n     * ! the nav becomes a full screen overlay resulting in the hero changing\n     * ! its position and vice versa.\n     * @param event Window Event WEB_EVENT_TYPES.RESIZE.\n     */\n    onResizeHandler(event) {\n        super.onResizeHandler(event);\n        this.nav.updateToLayout();\n        this.home.checkNavState(this.nav.isNavOpen);\n    }\n    /**\n     * when the user scrolls, we check for the active section.\n     * If the active section has changed, the url updates with the anchor path,\n     * section theme color is applied, and we see if the section has an intro\n     * usecase.\n     * if the section is in view and there are scenes that depend on scroll,\n     * we continue to check for scene activity.\n     * @param event Window Event WEB_EVENT_TYPES.SCROLL\n     */\n    onScrollHandler(event) {\n        const sectionCheck = this.checkForActiveSection();\n        if (sectionCheck && sectionCheck.name !== this.activeSection.name) {\n            this.activeSection = sectionCheck;\n            this.updateSectionURL();\n            const panel = this.activeSection.name;\n            this.themeManager.updateTheme(_abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.guardForNull(this.site.get(panel)).theme);\n            this.checkToIntroSections();\n        }\n        this.checkForScenesInSection();\n    }\n    /**\n     * Update the section URL by checking to see if pushstate is available for\n     * modern browsers, otherwise, we write the active section name to the hash.\n     * ! For updating the section and nav item active state as we scroll.\n     * @todo add a timer to check for when the user has stopped scrolling to\n     * update the hash url as there is suspicion that scrolling during the hash\n     * update causes a slight momentary lag.\n     */\n    updateSectionURL() {\n        if (typeof history.pushState != undefined) {\n            window.history.pushState(null, \'\', \'#\' + this.activeSection.name);\n        }\n        else {\n            window.location.hash = this.activeSection.name;\n        }\n        this.nav.updateActiveState(this.activeSection.name);\n    }\n    /**\n     * When a section becomes active, it\'s given the opportunity to audit the\n     * any site/app level parameters relating to its siblings and intro in.\n     */\n    checkToIntroSections() {\n        if (this.home.hero.isHeroIntroInProgress == true &&\n            this.activeSection.name != _base_constants_types__WEBPACK_IMPORTED_MODULE_2__.SectionKeys.HOME &&\n            this.activeSection.name != _base_constants_types__WEBPACK_IMPORTED_MODULE_2__.SectionKeys.ABOUT &&\n            this.activeSection.name != _base_constants_types__WEBPACK_IMPORTED_MODULE_2__.SectionKeys.SPORTS_SCIENCE) {\n            this.home.hero.forceShrink();\n        }\n        switch (this.activeSection.name) {\n            case _base_constants_types__WEBPACK_IMPORTED_MODULE_2__.SectionKeys.HOME:\n                this.home.updateQuickActionMenu();\n                this.home.updateHero();\n                break;\n            case _base_constants_types__WEBPACK_IMPORTED_MODULE_2__.SectionKeys.WORK_HISTORY:\n                this.workhistory.animate();\n                break;\n        }\n    }\n    /**\n     * Checks for scenes within Sections that need a fresh scrollPercentage for\n     * update.\n     */\n    checkForScenesInSection() {\n        switch (this.activeSection.name) {\n            case _base_constants_types__WEBPACK_IMPORTED_MODULE_2__.SectionKeys.HOME:\n                this.home.requestOutro();\n                break;\n            case _base_constants_types__WEBPACK_IMPORTED_MODULE_2__.SectionKeys.DOWNLOAD_ME:\n                this.downloadme.animate(this.activeSection.scrollPercentage);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handler for when the Theme Manager has updated\n     * the body.\n     * @param event hemeEvent.UPDATE\n     */\n    updateThemeHandler(event) {\n        if (this.activeSection.name === _base_constants_types__WEBPACK_IMPORTED_MODULE_2__.SectionKeys.WORK_HISTORY) {\n            this.workhistory.updateTheme(_abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.guardForNull(this.site.get(_base_constants_types__WEBPACK_IMPORTED_MODULE_2__.SectionKeys.WORK_HISTORY)).theme);\n        }\n    }\n    /**\n     * Handler for when the Theme Manager has randomized the theme map.\n     * We udate all saved themes within the site manager to remain consistent\n     * with what\'s been updated across the dom as all of the data-theme\n     * attributes have also been updated once Random Themes are set.\n     * @param event hemeEvent.RANDOM_THEMES_SET\n     */\n    randomThemeHandler(event) {\n        let panel;\n        for (panel of this.site.keys()) {\n            const randomTheme = _abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.cast(_abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.guardForNull(this.site.get(panel)).parent.dataset.theme);\n            const values = _abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.guardForNull(this.site.get(panel));\n            values.theme = randomTheme;\n        }\n        panel = this.activeSection.name;\n        this.themeManager.applyRandomThemeTo(_abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.guardForNull(this.site.get(panel)).parent);\n        this.workhistory.updateTheme(_abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.guardForNull(this.site.get(_base_constants_types__WEBPACK_IMPORTED_MODULE_2__.SectionKeys.WORK_HISTORY)).theme);\n    }\n    /**\n     * Handler for when the a nav item or element requests for a new section\n     * to come into view. The Url updates and we check to see if the new section\n     * needs to intro in.\n     * @param event AnchorEvent.NOTIFY_SELECTION\n     */\n    sectionRequestHandler(event) {\n        const upcomingSection = {\n            name: event.detail.sectionRequested,\n            scrollPercentage: 0,\n        };\n        if (this.site.get(upcomingSection.name)) {\n            this.previousSection = this.activeSection;\n            this.activeSection = upcomingSection;\n            this.updateSectionURL();\n            this.checkToIntroSections();\n        }\n    }\n    /**\n     * Handler for when the nav menu opens, we notify th home section\n     * of the nav status.\n     *\n     * ! if the nav is open on desktop view and we resize to mobile sizes,\n     * ! the nav becomes a full screen overlay resulting in the hero changing\n     * ! its position and vice versa.\n     *\n     * @param event NavEvent.OPEN_MENU\n     */\n    menuOpenHandler(event) {\n        this.home.checkNavState(event.detail.isNavOpen);\n    }\n    /**\n     * If the Hero state changes, the nav is notified to adjust itself along with\n     * the left and right info boxes.\n     * If the view mode is mobile, we let the nav know if the hero has shrunk\n     * or enlarged.\n     * If the mode is desktop and the hero has shrunk, we close the nav and\n     * update theme. The theme is updated because we do not treat the home as\n     * other sections where theme is updated when sections are active.\n     * If the mode is desktop and the hero has enlarged, we open the menu and\n     * update the theme back to the home sections theme.\n     * @param event HeroEvent.HERO_ANIMATED\n     */\n    checkHeroHandler(event) {\n        if (_base_constants_types__WEBPACK_IMPORTED_MODULE_2__.SITE_CONFIG.SITE_MODE !== _base_constants_types__WEBPACK_IMPORTED_MODULE_2__.SITE_STATE.DESKTOP) {\n            if (event.detail.state === _sections_home_events_heroevent__WEBPACK_IMPORTED_MODULE_12__.HeroEvent.HERO_SHRUNK) {\n                this.nav.adjustForHero(_sections_home_events_heroevent__WEBPACK_IMPORTED_MODULE_12__.HeroEvent.HERO_SHRUNK);\n            }\n            else {\n                this.nav.adjustForHero(_sections_home_events_heroevent__WEBPACK_IMPORTED_MODULE_12__.HeroEvent.HERO_ENLARGE);\n            }\n            return;\n        }\n        if (event.detail.state === _sections_home_events_heroevent__WEBPACK_IMPORTED_MODULE_12__.HeroEvent.HERO_SHRUNK) {\n            this.nav.close();\n            this.nav.adjustForHero(_sections_home_events_heroevent__WEBPACK_IMPORTED_MODULE_12__.HeroEvent.HERO_SHRUNK);\n            this.themeManager.updateTheme(_abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.guardForNull(this.site.get(_base_constants_types__WEBPACK_IMPORTED_MODULE_2__.SectionKeys.ABOUT)).theme);\n        }\n        else if (event.detail.state === _sections_home_events_heroevent__WEBPACK_IMPORTED_MODULE_12__.HeroEvent.HERO_ENLARGE) {\n            this.nav.open();\n            this.nav.adjustForHero(_sections_home_events_heroevent__WEBPACK_IMPORTED_MODULE_12__.HeroEvent.HERO_ENLARGE);\n            this.themeManager.updateTheme(_abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.guardForNull(this.site.get(_base_constants_types__WEBPACK_IMPORTED_MODULE_2__.SectionKeys.HOME)).theme);\n        }\n    }\n    /**\n     * A handler for when the user clicks the download link in the Download\n     * Codebase section.\n     * @param event SiteEvent.TRACK_CLICK\n     */\n    codebaseDownloadedHandler(event) {\n        this.fetch.codebaseDownloaded();\n    }\n    /**\n     * When an out-of-flow section outros, we update the section url to the\n     * previous section such as the case with Sports Science Analytics section\n     * for reference (FYI Sports Science is removed temporarily from this site).\n     * @param event SiteEvent.SECTION_OUTRO\n     */\n    sectionOutroHandler(event) {\n        this.activeSection = this.previousSection;\n        this.updateSectionURL();\n    }\n    /**\n     * Handler for when the hero is clicked, we randomize the themes.\n     * @param event WEB_EVENT_TYPES.CLICK = MouseEvent \'click\'\n     */\n    heroClickHandler(event) {\n        this.themeManager.randomize(true);\n    }\n    /**\n     * Handler for when firebase authenticates the anonymous user.\n     * @param event FirebaseEvent AUTHENTICATED\n     */\n    firebaseAuthHandler(event) {\n        this.fetch.getDownloads();\n    }\n    /**\n     * Handler for when firebase has returned the record we requested\n     * for the Downloads Counter so that we may update the Download\n     * Codebase section.\n     * @param event FirebaseEvent.RECORD_FETCHED\n     */\n    recordFetchedHandler(event) {\n        this.downloadme.updateDownloadCounter(event.detail.record);\n    }\n}\n\n\n//# sourceURL=webpack://coderesonsibly/./src/ts/components/coderesponsibly.ts?')},"./src/ts/components/firestorefetch/events/firebaseevent.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FirebaseEvent\": () => (/* binding */ FirebaseEvent)\n/* harmony export */ });\n/**\n * CustomEvent Class For FirebaseEvent. A Proper Example to extend Custom\n * Event to dispatch Events with instantiable custom types.\n * Meant to meet strict ES6 rules.\n */\nclass FirebaseEvent extends CustomEvent {\n    /**\n     * Instantiate similarily to CustomEvent\n     * @param typeName the type name should be the reasonly properties\n     * in this class.\n     * @param init optional. Takes the subclass of CustomEventInit to meet\n     * the super class constructor defition.\n     */\n    constructor(typeName, init) {\n        super(typeName, init);\n    }\n}\n// Dispatchable Event Types\nFirebaseEvent.RECORD_FETCHED = 'firebase-record-fetched';\nFirebaseEvent.RECORD_UPDATED = 'firebase-record-updated';\nFirebaseEvent.AUTHENTICATED = 'firebase-authenticated';\n\n\n//# sourceURL=webpack://coderesonsibly/./src/ts/components/firestorefetch/events/firebaseevent.ts?")},"./src/ts/components/nav/events/navevent.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NavEvent\": () => (/* binding */ NavEvent)\n/* harmony export */ });\n/**\n * Custom Event Class For Main Nav.\n * A Proper Example to extend Custom Event to dispatch Events with instantiable\n * custom types. Meant to meet strict ES6 rules.\n */\nclass NavEvent extends CustomEvent {\n    /**\n     * Instantiate like CustomEvent\n     * @param typeName the type name should be the reasonly properties\n     * in this class.\n     * @param init The Expected subclass of CustomEventInit to pass\n     *  paremeters around.\n     */\n    constructor(typeName, init) {\n        super(typeName, init);\n        this.init = init;\n    }\n}\n// Dispatchable Event Type\nNavEvent.OPEN_MENU = 'nav-menu-opened';\n\n\n//# sourceURL=webpack://coderesonsibly/./src/ts/components/nav/events/navevent.ts?")},"./src/ts/components/nav/nav.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Nav\": () => (/* binding */ Nav)\n/* harmony export */ });\n/* harmony import */ var _base_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @base/component */ \"./src/ts/base/component.ts\");\n/* harmony import */ var _sections_home_events_heroevent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sections/home/events/heroevent */ \"./src/ts/components/sections/home/events/heroevent.ts\");\n/* harmony import */ var _components_nav_events_navevent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @components/nav/events/navevent */ \"./src/ts/components/nav/events/navevent.ts\");\n/* harmony import */ var _base_constants_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @base/constants/types */ \"./src/ts/base/constants/types.ts\");\n/* harmony import */ var _abstract_typeguard__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @abstract/typeguard */ \"./src/ts/abstract/typeguard.ts\");\n\n\n\n\n\n/**\n * Data structure representing section-specific style classes.\n */\nvar NAV_ELEMENTS;\n(function (NAV_ELEMENTS) {\n    NAV_ELEMENTS[\"NAV\"] = \".cr-menu\";\n    NAV_ELEMENTS[\"NAV_TAG\"] = \"nav\";\n    NAV_ELEMENTS[\"NAV_INFO_LEFT\"] = \".nav-info-area\";\n    NAV_ELEMENTS[\"NAV_INFO_RIGHT\"] = \".nav-info-desc\";\n})(NAV_ELEMENTS || (NAV_ELEMENTS = {}));\n/**\n * The Main Menu of the site including the info boxes surrounding the nav.\n *\n * <nav>\n *   <div class='nav-info-area nav-info-box-styling'>..</div>\n *   <div class='nav-info-desc nav-info-box-styling'>..</div>\n *   <div class='cr-menu'>..</div>\n *  </nav>\n */\nclass Nav extends _base_component__WEBPACK_IMPORTED_MODULE_0__.Component {\n    /**\n     * subclassing Component -> CoreElement.\n     * @param elementID the indentifier to search for marking the main container\n     * of the component. If an elementID is not passed in, we fallback on a\n     * default value from or nav-defined data structure.\n     */\n    constructor(elementId = '') {\n        const key = elementId || NAV_ELEMENTS.NAV_TAG;\n        super(key);\n        this.isNavOpen = false;\n        this.info_box_left = _abstract_typeguard__WEBPACK_IMPORTED_MODULE_4__.TypeGuard.cast(document.querySelector(NAV_ELEMENTS.NAV_INFO_LEFT));\n        this.bodyTag = _abstract_typeguard__WEBPACK_IMPORTED_MODULE_4__.TypeGuard.cast(document.querySelector('body'));\n        if (!this.container) {\n            return;\n        }\n        this.init();\n    }\n    /**\n     * Checks to see the nav is closed, and if so, opens the nav and notifies\n     * the main app the nav has opened.\n     */\n    open() {\n        if (this.isNavOpen === true) {\n            return;\n        }\n        this.isNavOpen = true;\n        this.updateToLayout();\n        this.container.head.classList.add(_base_constants_types__WEBPACK_IMPORTED_MODULE_3__.WEB_EVENT_TYPES.OPEN_MENU);\n        this.dispatchEvent(new _components_nav_events_navevent__WEBPACK_IMPORTED_MODULE_2__.NavEvent(_components_nav_events_navevent__WEBPACK_IMPORTED_MODULE_2__.NavEvent.OPEN_MENU, { detail: { isNavOpen: this.isNavOpen } }));\n    }\n    /**\n     * Checks to see the nav is open, and if so, closes the nav and notifies\n     * the main app the nav has opened.\n     */\n    close() {\n        if (this.isNavOpen === false) {\n            return;\n        }\n        this.isNavOpen = false;\n        this.updateToLayout();\n        this.container.head.classList.remove(_base_constants_types__WEBPACK_IMPORTED_MODULE_3__.WEB_EVENT_TYPES.OPEN_MENU);\n        this.dispatchEvent(new _components_nav_events_navevent__WEBPACK_IMPORTED_MODULE_2__.NavEvent(_components_nav_events_navevent__WEBPACK_IMPORTED_MODULE_2__.NavEvent.OPEN_MENU, { detail: { isNavOpen: this.isNavOpen } }));\n    }\n    /**\n     * Adds the active state to a nav item since deep linking url can be updated\n     * by other means besides selecting items in the nav, such as by user scroll\n     * and other elements in different sections.\n     * @param id the search key to test against the href tag of the the nav items.\n     */\n    updateActiveState(id) {\n        const searchKey = '#' + id;\n        for (let i = 0; i < this.links.length; i++) {\n            if (this.links[i].getAttribute('href') !== searchKey) {\n                this.links[i].classList.remove('active');\n            }\n            else {\n                this.links[i].classList.toggle('active');\n            }\n        }\n    }\n    /**\n     * Checks for the href tag that matches a section id attribute and forces\n     * the MouseEvent click functionality to mimic the user click of a nav item.\n     * @param id the search key to test against the href tag of the the nav items.\n     */\n    forceClickEvent(id) {\n        const searchKey = '#' + id;\n        const forcedEvent = new MouseEvent('click', {\n            view: window,\n            bubbles: true,\n            cancelable: true,\n        });\n        for (let i = 0; i < this.links.length; i++) {\n            if (this.links[i].getAttribute('href') === searchKey) {\n                this.links[i].dispatchEvent(forcedEvent);\n                break;\n            }\n        }\n    }\n    /**\n     * Updates the nav based on whether we're on desktop or mobile and if\n     * the nav is open or not. On mobile, the nav is fullscreen and we prevent\n     * scrolling while the nav is open.\n     * If the nav is closed on mobile or the new state is desktop, we allow\n     * scrolling.\n     */\n    updateToLayout() {\n        switch (_base_constants_types__WEBPACK_IMPORTED_MODULE_3__.SITE_CONFIG.SITE_MODE) {\n            case _base_constants_types__WEBPACK_IMPORTED_MODULE_3__.SITE_STATE.DESKTOP:\n                if (this.lastDisplayState === _base_constants_types__WEBPACK_IMPORTED_MODULE_3__.SITE_STATE.NOT_DESKTOP) {\n                    this.bodyTag.style.overflow = 'auto';\n                }\n                break;\n            case _base_constants_types__WEBPACK_IMPORTED_MODULE_3__.SITE_STATE.NOT_DESKTOP:\n            default:\n                this.bodyTag.style.overflow = this.isNavOpen ? 'hidden' : 'auto';\n                break;\n        }\n        this.lastDisplayState = _base_constants_types__WEBPACK_IMPORTED_MODULE_3__.SITE_CONFIG.SITE_MODE;\n    }\n    /**\n     * if the hero has shrunk, we want the left info box on the nav to scoot\n     * over. If the hero is large, we want the left info box to move back to\n     * its original position.\n     * @param heroState the state of whether the hero is large or shrunken.\n     */\n    adjustForHero(heroState) {\n        if (heroState === _sections_home_events_heroevent__WEBPACK_IMPORTED_MODULE_1__.HeroEvent.HERO_SHRUNK) {\n            this.info_box_left.classList.add('hero-shrunk');\n        }\n        else {\n            this.info_box_left.classList.remove('hero-shrunk');\n        }\n    }\n    /**\n     * Method to handle all functionality needed to appropriately initialized\n     * the component. For Nav, adds a doc-level Mouse Click listener to close\n     * the nav when the user clicks anywhere on the site.\n     */\n    init() {\n        document.addEventListener(_base_constants_types__WEBPACK_IMPORTED_MODULE_3__.WEB_EVENT_TYPES.CLICK, (event) => this.onClickWhileMenuOpenHandler(event));\n        const burger = _abstract_typeguard__WEBPACK_IMPORTED_MODULE_4__.TypeGuard.cast(document.querySelector('.burger'));\n        burger.addEventListener(_base_constants_types__WEBPACK_IMPORTED_MODULE_3__.WEB_EVENT_TYPES.CLICK, (event) => this.onBurgerClickHandler(event));\n        this.setLinks('ul', true);\n    }\n    /**\n     * Handler to toggle the menu open or closed when the user clicks the nav\n     * hamburger.\n     * @param event MouseEvent.CLICK\n     */\n    onBurgerClickHandler(event) {\n        if (this.container.head.classList.contains('open-menu')) {\n            this.close();\n        }\n        else {\n            this.open();\n        }\n    }\n    /**\n     * Handler for the doc-level Mouse Click listener that closes the nav\n     * if it is open if the user clicks anywhere else besides the burger.\n     * @param event MouseEvent.CLICK\n     */\n    onClickWhileMenuOpenHandler(event) {\n        const menuClicked = _abstract_typeguard__WEBPACK_IMPORTED_MODULE_4__.TypeGuard.cast(event.target);\n        if (!menuClicked.matches('.burger') &&\n            !menuClicked.matches('.burger a') &&\n            this.isNavOpen === true) {\n            this.close();\n        }\n    }\n}\n\n\n//# sourceURL=webpack://coderesonsibly/./src/ts/components/nav/nav.ts?")},"./src/ts/components/sections/aboutme/aboutme.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "ABOUTME_ELEMENTS": () => (/* binding */ ABOUTME_ELEMENTS),\n/* harmony export */   "AboutMe": () => (/* binding */ AboutMe)\n/* harmony export */ });\n/* harmony import */ var _base_section__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @base/section */ "./src/ts/base/section.ts");\n\n/**\n * Data structure of all possible tag & class references required\n * to componetize the the Leadership Principles Section.\n */\nvar ABOUTME_ELEMENTS;\n(function (ABOUTME_ELEMENTS) {\n    ABOUTME_ELEMENTS["LINKS_COLLECTION"] = ".copy-paragraph-container";\n})(ABOUTME_ELEMENTS || (ABOUTME_ELEMENTS = {}));\n/**\n * About Me section of Code Responsibly. Section can be components or contain\n * multiple components.\n * !Sections are qualified by having an id attribute at the parent level or\n * !the first child occurence of the id attribute.\n *\n * <section class=\'panel about\'>\n *   ..\n *     <div id=\'about\'>..</div>\n *   ..\n * </section>\n */\nclass AboutMe extends _base_section__WEBPACK_IMPORTED_MODULE_0__.Section {\n    /**\n     * subclassing Section -> Component -> CoreElement.\n     * @param elementID the indentifier to search for regardless of whether the\n     * id attribute is in the section tag or belongs to a child of the section\n     * tag.\n     */\n    constructor(elementID) {\n        super(elementID);\n        this.setLinks(ABOUTME_ELEMENTS.LINKS_COLLECTION);\n    }\n}\n\n\n//# sourceURL=webpack://coderesonsibly/./src/ts/components/sections/aboutme/aboutme.ts?')},"./src/ts/components/sections/downloadme/downloadme.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "DOWNLOAD_ME_ELEMENTS": () => (/* binding */ DOWNLOAD_ME_ELEMENTS),\n/* harmony export */   "DownloadMe": () => (/* binding */ DownloadMe)\n/* harmony export */ });\n/* harmony import */ var _base_events_siteevent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @base/events/siteevent */ "./src/ts/base/events/siteevent.ts");\n/* harmony import */ var _abstract_elementassist__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @abstract/elementassist */ "./src/ts/abstract/elementassist.ts");\n/* harmony import */ var _base_section__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @base/section */ "./src/ts/base/section.ts");\n/* harmony import */ var _base_constants_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @base/constants/types */ "./src/ts/base/constants/types.ts");\n/* harmony import */ var _abstract_typeguard__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @abstract/typeguard */ "./src/ts/abstract/typeguard.ts");\n\n\n\n\n\n/**\n * Data structure of all possible tag & class references required\n * to componetize the the Download Me Section.\n */\nvar DOWNLOAD_ME_ELEMENTS;\n(function (DOWNLOAD_ME_ELEMENTS) {\n    DOWNLOAD_ME_ELEMENTS["STAR_SPINNER"] = ".star-spinner-container img";\n    DOWNLOAD_ME_ELEMENTS["DOWNLOAD_COUNTER"] = ".codebase-download-counter";\n    DOWNLOAD_ME_ELEMENTS["DOWNLOAD_LINK"] = ".download-link";\n})(DOWNLOAD_ME_ELEMENTS || (DOWNLOAD_ME_ELEMENTS = {}));\n/**\n * Download Codebase section of Code Responsibly. Section can be components or\n * contain multiple components.\n * !Sections are qualified by having an id attribute at the parent level or\n * !the first child occurence of the id attribute.\n *\n * <section class=\'panel download-me\'>\n *   ..\n *     <div id=\'download-me\'>..</div>\n *   ..\n * </section>\n */\nclass DownloadMe extends _base_section__WEBPACK_IMPORTED_MODULE_2__.Section {\n    /**\n     * subclassing Section -> Component -> CoreElement.\n     * @param elementID the indentifier to search for regardless of whether the\n     * id attribute is in the section tag or belongs to a child of the section\n     * tag.\n     */\n    constructor(elementID) {\n        super(elementID);\n        this.preventRepaintReflow();\n        this.applyListeners();\n    }\n    /**\n     * Animates the wheel based on how much of the section has been scrolled.\n     * !percentage is passed but no longer used since the section uses\n     * !position:sticky.\n     * @param percentage the amount of scroll for the section to enter and exit\n     * the viewport.\n     */\n    animate(percentage) {\n        const scrollTop = _abstract_elementassist__WEBPACK_IMPORTED_MODULE_1__.ElementAssist.window().scrollTop;\n        const offset = scrollTop * 0.8;\n        //let percentage =  scrollTop / this.container.offsetHeight;\n        //percentage = Math.round(percentage * 100) / 100;\n        this.wheel.style.transform = \'rotate(\' + offset + \'deg)\';\n    }\n    /**\n     * Updates the copy to include the # of times the codebase zip has been\n     * downloaded from the site.\n     * @param firestoreValue the value retrieved from the firestore.\n     */\n    updateDownloadCounter(firestoreValue) {\n        this.downloadCopy.textContent = firestoreValue.toLocaleString(\'en-US\');\n    }\n    /**\n     * Adds necessary listeners such as clicking to download the codebase\n     * so that we may update the value in the firestore.\n     */\n    applyListeners() {\n        super.applyListeners();\n        const downloadClickListener = (event) => this.downloadClickedkHandler(event);\n        this.downloadLink.addEventListener(_base_constants_types__WEBPACK_IMPORTED_MODULE_3__.WEB_EVENT_TYPES.CLICK, downloadClickListener);\n    }\n    /**\n     * Called once to hold onto elements the section needs to prevent\n     * further dom calls that could result in repaint or reflow.\n     */\n    preventRepaintReflow() {\n        this.wheel = _abstract_typeguard__WEBPACK_IMPORTED_MODULE_4__.TypeGuard.cast(document.querySelector(DOWNLOAD_ME_ELEMENTS.STAR_SPINNER));\n        this.downloadLink = _abstract_typeguard__WEBPACK_IMPORTED_MODULE_4__.TypeGuard.cast(document.querySelector(DOWNLOAD_ME_ELEMENTS.DOWNLOAD_LINK));\n        this.downloadCopy = _abstract_typeguard__WEBPACK_IMPORTED_MODULE_4__.TypeGuard.cast(document.querySelector(DOWNLOAD_ME_ELEMENTS.DOWNLOAD_COUNTER));\n    }\n    /**\n     * The handler for download codebase link being clicked.\n     * @param event MouseEvent Click\n     */\n    downloadClickedkHandler(event) {\n        this.dispatchEvent(new _base_events_siteevent__WEBPACK_IMPORTED_MODULE_0__.SiteEvent(_base_events_siteevent__WEBPACK_IMPORTED_MODULE_0__.SiteEvent.TRACK_CLICK));\n    }\n}\n\n\n//# sourceURL=webpack://coderesonsibly/./src/ts/components/sections/downloadme/downloadme.ts?')},"./src/ts/components/sections/home/events/heroevent.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"HeroEvent\": () => (/* binding */ HeroEvent)\n/* harmony export */ });\n/**\n * Custom Event Class For The Home section.\n * A Proper Example to extend Custom Event to dispatch Events with instantiable\n * custom types. Meant to meet strict ES6 rules.\n */\nclass HeroEvent extends CustomEvent {\n    /**\n     * Instantiate similarily to CustomEvent\n     * @param typeName the type name should be the reasonly properties\n     * in this class.\n     * @param init optional. Takes the subclass of CustomEventInit to meet\n     * the super class constructor defition.\n     */\n    constructor(typeName, init) {\n        super(typeName, init);\n    }\n}\n// Dispatchable Event Type\nHeroEvent.HERO_SHRUNK = 'shrunk-event';\nHeroEvent.HERO_ENLARGE = 'enlarge-event';\nHeroEvent.HERO_ANIMATED = 'hero-animation-event';\n\n\n//# sourceURL=webpack://coderesonsibly/./src/ts/components/sections/home/events/heroevent.ts?")},"./src/ts/components/sections/home/hero.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Hero\": () => (/* binding */ Hero)\n/* harmony export */ });\n/* harmony import */ var _abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @abstract/typeguard */ \"./src/ts/abstract/typeguard.ts\");\n/* harmony import */ var _base_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @base/component */ \"./src/ts/base/component.ts\");\n/* harmony import */ var _base_constants_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @base/constants/types */ \"./src/ts/base/constants/types.ts\");\n/* harmony import */ var _events_heroevent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./events/heroevent */ \"./src/ts/components/sections/home/events/heroevent.ts\");\n\n\n\n\n/**\n * Data structure of all possible tag & class references required\n * to componetize the the Leadership Principles Section.\n */\nvar HERO_ELEMENTS;\n(function (HERO_ELEMENTS) {\n    HERO_ELEMENTS[\"HERO_HEAD\"] = \".panel.home\";\n    HERO_ELEMENTS[\"HERO_LOGO\"] = \".hero-logo\";\n    HERO_ELEMENTS[\"HERO_IMG\"] = \".hero-logo img.hero-img\";\n    HERO_ELEMENTS[\"HERO_IMG_OVERLAY\"] = \".hero-logo img.hero-img-overlay\";\n})(HERO_ELEMENTS || (HERO_ELEMENTS = {}));\n/** The Main Hero in the Header section of the site. */\nclass Hero extends _base_component__WEBPACK_IMPORTED_MODULE_1__.Component {\n    /**\n     * subclassing Component -> CoreElement.\n     * @param elementID the indentifier to search for marking the main container\n     * of the component.\n     */\n    constructor(elementId) {\n        super(elementId);\n        this.SVG = 'svg';\n        this.maxHeight = 70;\n        this.isShrunk = false;\n        this._isHeroIntroInProgress = false;\n        this.init();\n    }\n    /**\n     * method to handle all functionality needed to appropriately initialized\n     * the component. For Hero, keeping track of the original height of the logo\n     * before any browser resizes.\n     */\n    init() {\n        this.originalHeight = this.logo.getBoundingClientRect().height;\n        this.preventRepaintReflow();\n        this.applyListeners();\n    }\n    /**\n     * getter for the HTMLElement of the parent element of the hero.\n     */\n    get logo() {\n        return this.container.head;\n    }\n    /**\n     * getter for if hero intro has begun and is in progress.\n     */\n    get isHeroIntroInProgress() {\n        return this._isHeroIntroInProgress;\n    }\n    /**\n     * sets the pcomponents head element and resets the original height.\n     */\n    set logo(val) {\n        this.container.head = val;\n        this.originalHeight = this.logo.getBoundingClientRect().height;\n    }\n    /**\n     * Intros the SVGs and handles when the SVGs have completed their intro\n     */\n    intro() {\n        this.elements.HERO_HEAD.classList.add('draw-in-hero');\n        this._isHeroIntroInProgress = true;\n        this.introSvgs[0].addEventListener(_base_constants_types__WEBPACK_IMPORTED_MODULE_2__.WEB_EVENT_TYPES.ANIMATION_ENDED, this.svgIntroCompleteListener);\n    }\n    /**\n     * Sets the appropriate css classes to shrink the hero.\n     */\n    shrink() {\n        this.isShrunk = true;\n        this.resize();\n        if (this.elements.HERO_HEAD.classList.contains('animate-on-menu-open')) {\n            this.elements.HERO_HEAD.classList.remove('animate-on-menu-open');\n        }\n        this.elements.HERO_HEAD.classList.add('hero-shrunk');\n        this.dispatchEvent(new _events_heroevent__WEBPACK_IMPORTED_MODULE_3__.HeroEvent(_events_heroevent__WEBPACK_IMPORTED_MODULE_3__.HeroEvent.HERO_ANIMATED, {\n            detail: {\n                state: _events_heroevent__WEBPACK_IMPORTED_MODULE_3__.HeroEvent.HERO_SHRUNK,\n            },\n        }));\n    }\n    /**\n     * Sets the appropriate css classes to immediately jump to the shrink state\n     * of the hero.\n     */\n    forceShrink() {\n        this.shrink();\n        this.elements.HERO_HEAD.classList.add('notransition');\n    }\n    /**\n     * Sets the appropriate css classes to shrink the hero when the\n     * menu is open on mobile sized browsers.\n     */\n    shrinkOnMobileMenuOpen() {\n        if (this.elements.HERO_HEAD.classList.contains('notransition')) {\n            this.elements.HERO_HEAD.classList.remove('notransition');\n        }\n        this.isShrunk = true;\n        this.resize();\n        this.elements.HERO_HEAD.classList.add('hero-shrunk');\n        this.elements.HERO_HEAD.classList.add('animate-on-menu-open');\n        this.dispatchEvent(new _events_heroevent__WEBPACK_IMPORTED_MODULE_3__.HeroEvent(_events_heroevent__WEBPACK_IMPORTED_MODULE_3__.HeroEvent.HERO_ANIMATED, {\n            detail: {\n                state: _events_heroevent__WEBPACK_IMPORTED_MODULE_3__.HeroEvent.HERO_SHRUNK,\n            },\n        }));\n    }\n    /**\n     * Makes the hero large back to the original state.\n     */\n    enlarge() {\n        if (this.elements.HERO_HEAD.classList.contains('notransition')) {\n            this.elements.HERO_HEAD.classList.remove('notransition');\n        }\n        if (this.elements.HERO_HEAD.classList.contains('animate-on-menu-open')) {\n            this.elements.HERO_HEAD.classList.remove('animate-on-menu-open');\n        }\n        this.elements.HERO_HEAD.classList.remove('hero-shrunk');\n        this.isShrunk = false;\n        this.logo.style.transform = 'scale(1)';\n        this.dispatchEvent(new _events_heroevent__WEBPACK_IMPORTED_MODULE_3__.HeroEvent(_events_heroevent__WEBPACK_IMPORTED_MODULE_3__.HeroEvent.HERO_ANIMATED, {\n            detail: {\n                state: _events_heroevent__WEBPACK_IMPORTED_MODULE_3__.HeroEvent.HERO_ENLARGE,\n            },\n        }));\n    }\n    /**\n     * resizes the header based on the appropriate ratio by confining it to a\n     * maximum height possible when shrunken.\n     */\n    resize() {\n        const ratio = this.maxHeight / this.logo.clientHeight;\n        this.logo.style.transform = 'scale(' + ratio + ')';\n    }\n    /**\n     * Sets up necessary animation listeners for hero intro. Holding the\n     * reference to remove if listeners already attached and intro has\n     * occurred once.\n     */\n    applyListeners() {\n        this.svgIntroCompleteListener = (event) => this.svgIntroCompleteHandler(event);\n    }\n    /**\n     * Called once to hold onto elements the section needs to prevent\n     * further dom calls that could result in repaint or reflow. Loops through\n     * all possible elements needed for Hero functionality.\n     * ! Uses the generic type to allow access of the HTMLElement by using the\n     * ! data structure key name as the property name of elements.\n     */\n    preventRepaintReflow() {\n        this.elements = {};\n        for (const element of Object.keys(HERO_ELEMENTS)) {\n            this.elements[element] = _abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.assertInstance(HTMLElement, document.querySelector(HERO_ELEMENTS[element]));\n        }\n        this.introSvgs = _abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.cast(this.elements.HERO_LOGO.getElementsByTagName(_base_constants_types__WEBPACK_IMPORTED_MODULE_2__.HTML_TAGS.SVG));\n    }\n    /**\n     * Handles when the SVG animation of the hero has completed resulting in a\n     * rquest for the main hero images to animate in.\n     * @param event AnimationEvent.ANIMATION_ENDED\n     */\n    svgIntroCompleteHandler(event) {\n        this.introSvgs[0].removeEventListener(_base_constants_types__WEBPACK_IMPORTED_MODULE_2__.WEB_EVENT_TYPES.ANIMATION_ENDED, this.svgIntroCompleteListener);\n        this.elements.HERO_HEAD.classList.remove('draw-in-hero');\n        this.elements.HERO_HEAD.classList.add('fade-in-hero');\n        this._isHeroIntroInProgress = false;\n    }\n}\n\n\n//# sourceURL=webpack://coderesonsibly/./src/ts/components/sections/home/hero.ts?")},"./src/ts/components/sections/home/home.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "HOME_ELEMENTS": () => (/* binding */ HOME_ELEMENTS),\n/* harmony export */   "Home": () => (/* binding */ Home)\n/* harmony export */ });\n/* harmony import */ var _sections_home_hero__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sections/home/hero */ "./src/ts/components/sections/home/hero.ts");\n/* harmony import */ var _sections_home_quickactionmenu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sections/home/quickactionmenu */ "./src/ts/components/sections/home/quickactionmenu.ts");\n/* harmony import */ var _base_section__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @base/section */ "./src/ts/base/section.ts");\n/* harmony import */ var _base_constants_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @base/constants/types */ "./src/ts/base/constants/types.ts");\n\n\n\n\n/**\n * Data structure of all possible tag & class references required\n * to componetize the the Home Section.\n */\nvar HOME_ELEMENTS;\n(function (HOME_ELEMENTS) {\n    HOME_ELEMENTS["MAIN_LOGO"] = ".hero-logo";\n    HOME_ELEMENTS["MAIN_INTRO_LINE"] = ".intro-line .intro-line-container";\n})(HOME_ELEMENTS || (HOME_ELEMENTS = {}));\n/**\n * The Home section of Code Responsibly. Section can be components or\n * contain multiple components.\n * !Sections are qualified by having an id attribute at the parent level or\n * !the first child occurence of the id attribute.\n *\n * <header id=\'home\'>\n *   ..\n * </header>\n */\nclass Home extends _base_section__WEBPACK_IMPORTED_MODULE_2__.Section {\n    /**\n     * subclassing Section -> Component -> CoreElement.\n     * @param elementID the indentifier to search for regardless of whether the\n     * id attribute is in the section tag or belongs to a child of the section\n     * tag.\n     */\n    constructor(elementID) {\n        super(elementID);\n        this.navActivated = false;\n        this.scrollPointToTakeAction = -30;\n        this.outroOccurred = false;\n        this._hero = new _sections_home_hero__WEBPACK_IMPORTED_MODULE_0__.Hero(HOME_ELEMENTS.MAIN_LOGO);\n        this.quickActionMenu = new _sections_home_quickactionmenu__WEBPACK_IMPORTED_MODULE_1__.QuickActionMenu(HOME_ELEMENTS.MAIN_INTRO_LINE);\n    }\n    /**\n     * for quick access to the hero, the main component of the section.\n     */\n    get hero() {\n        return this._hero;\n    }\n    /**\n     * Iddentifies if the Quick Action Menu needs to animate in or animate out\n     * based on a unique scroll to action point set for the the home section.\n     */\n    updateQuickActionMenu() {\n        const elementTop = this.container.head.getBoundingClientRect().top;\n        if (this.hero.isShrunk === false &&\n            elementTop < this.scrollPointToTakeAction) {\n            this.quickActionMenu.animate(true);\n            return;\n        }\n        if (this.hero.isShrunk === true &&\n            elementTop > this.scrollPointToTakeAction) {\n            this.quickActionMenu.animate(false);\n        }\n    }\n    /**\n     * a method that requests an outro for elements that need to exit the viewport\n     * or for the hero to shrink if possible.\n     */\n    requestOutro() {\n        this.updateQuickActionMenu();\n        this.updateHero();\n    }\n    /**\n     * Determins if the hero needs to be shrunk or enlarged, and notifies the\n     * app by HeroEvent.\n     * @param forceShrink forces the nav and hero state to be a compressed header\n     * bar if we force shrink the hero.\n     */\n    updateHero(forceShrink = false) {\n        const elementTop = this.container.head.getBoundingClientRect().top;\n        if (forceShrink == true && this.hero.isShrunk == false) {\n            this.hero.forceShrink();\n            return;\n        }\n        if (this.hero.isShrunk === false &&\n            elementTop < this.scrollPointToTakeAction) {\n            this.hero.shrink();\n            return;\n        }\n        if (this.hero.isShrunk === true &&\n            elementTop > this.scrollPointToTakeAction) {\n            this.hero.enlarge();\n        }\n    }\n    /**\n     * Receives the nav state and determins what to do with the hero.\n     * If the view mode is desktop and open-menu exists on the hero element,\n     * this is due to use-case of resize / mobile requiring the hero to\n     * have an additional state. Therefore, we check and remove the OPEN_MENU\n     * state since we are now in desktop view.\n     *\n     * if the nav is open and the hero is shrunk, we resize the shrunken hero to\n     * match size constraints in the top header.\n     *\n     * if the the navv state has changed from the previous state,\n     * @param navActivated the state of the nav being open or not\n     */\n    checkNavState(navActivated = false) {\n        if (_base_constants_types__WEBPACK_IMPORTED_MODULE_3__.SITE_CONFIG.SITE_MODE === _base_constants_types__WEBPACK_IMPORTED_MODULE_3__.SITE_STATE.DESKTOP) {\n            if (this.container.head.classList.contains(_base_constants_types__WEBPACK_IMPORTED_MODULE_3__.WEB_EVENT_TYPES.OPEN_MENU)) {\n                this.container.head.classList.remove(_base_constants_types__WEBPACK_IMPORTED_MODULE_3__.WEB_EVENT_TYPES.OPEN_MENU);\n                this.navActivated = false;\n            }\n            return;\n        }\n        if (navActivated === this.navActivated && this.hero.isShrunk) {\n            this.hero.resize();\n        }\n        if (navActivated !== this.navActivated) {\n            if (navActivated) {\n                this.container.head.classList.add(_base_constants_types__WEBPACK_IMPORTED_MODULE_3__.WEB_EVENT_TYPES.OPEN_MENU);\n                if (this.hero.isShrunk === false) {\n                    this.hero.shrinkOnMobileMenuOpen();\n                }\n            }\n            else {\n                this.updateHero();\n                this.container.head.classList.remove(_base_constants_types__WEBPACK_IMPORTED_MODULE_3__.WEB_EVENT_TYPES.OPEN_MENU);\n            }\n        }\n        this.navActivated = navActivated;\n    }\n}\n\n\n//# sourceURL=webpack://coderesonsibly/./src/ts/components/sections/home/home.ts?')},"./src/ts/components/sections/home/quickactionmenu.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"QuickActionMenu\": () => (/* binding */ QuickActionMenu)\n/* harmony export */ });\n/* harmony import */ var _base_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @base/component */ \"./src/ts/base/component.ts\");\n/* harmony import */ var _base_constants_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @base/constants/types */ \"./src/ts/base/constants/types.ts\");\n\n\n/**\n * Quick Action Menu in the Home Section allows for an top call-to-actions to\n * stand out beyond the items in the nav. The Quick Action animates in and out\n * when the home section enters or exits into viewport.\n */\nclass QuickActionMenu extends _base_component__WEBPACK_IMPORTED_MODULE_0__.Component {\n    /**\n     * subclassing Component -> CoreElement.\n     * @param elementID the indentifier to search for marking the main container\n     * of the component.\n     */\n    constructor(elementId) {\n        super(elementId);\n        this.preventRepaintReflow();\n        this.applyListeners();\n    }\n    /**\n     * A single method to handle if the quick action should animate in or out.\n     * @param animateOut if set to true, the quick action animates out of the\n     * viewport. By default, the menu has animated in upon load.\n     */\n    animate(animateOut = true) {\n        this.animateOut = animateOut;\n        if (animateOut) {\n            this.menuItems[0].style.transform = 'translateX(-50vw)';\n            this.menuItems[2].style.transform = 'translateX(50vw)';\n        }\n        else {\n            this.menuItems[0].style.transform = 'translateX(0vw)';\n            this.menuItems[2].style.transform = 'translateX(0vw)';\n        }\n    }\n    /**\n     * a method intended to be called once to hold onto elements the section\n     * needs to prevent further dom calls that could result in repaint or reflow.\n     */\n    preventRepaintReflow() {\n        this.menuItems = this.container.head.querySelectorAll('span');\n    }\n    /**\n     * Adds transition listeners only to the first element as it's unneccessary\n     * to adda listener to every menuItem. If we know all menu items will animate\n     * at the same time for the same amount of time, one listner suffices.\n     */\n    applyListeners() {\n        super.applyListeners();\n        this.transitionStartListener = (event) => this.transitionStartHandler(event);\n        this.menuItems[0].addEventListener(_base_constants_types__WEBPACK_IMPORTED_MODULE_1__.WEB_EVENT_TYPES.TRANSITION_RUN, this.transitionStartListener);\n        this.transitionEndListener = (event) => this.transitionEndHandler(event);\n        this.menuItems[0].addEventListener(_base_constants_types__WEBPACK_IMPORTED_MODULE_1__.WEB_EVENT_TYPES.TRANSITION_END, this.transitionEndListener);\n    }\n    /**\n     * Handler for when the transition has been initiated to start.\n     * @param event TransitionEvent.TRANSITION_RUN\n     */\n    transitionStartHandler(event) {\n        this.menuItems[0].style.visibility = 'visible';\n        this.menuItems[2].style.visibility = 'visible';\n    }\n    /**\n     * Handler for when the transition has completed.\n     * @param event TransitionEvent.TRANSITION_OUT\n     */\n    transitionEndHandler(event) {\n        if (this.animateOut) {\n            this.menuItems[0].style.visibility = 'hidden';\n            this.menuItems[2].style.visibility = 'hidden';\n        }\n    }\n}\n\n\n//# sourceURL=webpack://coderesonsibly/./src/ts/components/sections/home/quickactionmenu.ts?")},"./src/ts/components/sections/leadershiplist/constants/types.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "MY_PRINCIPLES_ELEMENTS": () => (/* binding */ MY_PRINCIPLES_ELEMENTS)\n/* harmony export */ });\n/**\n * Data structure of all possible tag & class references required\n * to componetize the the Leadership Principles Section.\n */\nvar MY_PRINCIPLES_ELEMENTS;\n(function (MY_PRINCIPLES_ELEMENTS) {\n    MY_PRINCIPLES_ELEMENTS["RULES_ITEM"] = ".rules-item";\n    MY_PRINCIPLES_ELEMENTS["SVGS"] = ".rules-item svg";\n    MY_PRINCIPLES_ELEMENTS["SVG_NUMBER"] = ".rules-item svg text";\n    MY_PRINCIPLES_ELEMENTS["HEADLINE_TEXT"] = ".rules-item .rules-item-headline span";\n    MY_PRINCIPLES_ELEMENTS["COPY_TEXT"] = ".rules-item .rules-item-copy";\n})(MY_PRINCIPLES_ELEMENTS || (MY_PRINCIPLES_ELEMENTS = {}));\n\n\n//# sourceURL=webpack://coderesonsibly/./src/ts/components/sections/leadershiplist/constants/types.ts?')},"./src/ts/components/sections/leadershiplist/leadershipprinciples.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "LeadershipPrinciples": () => (/* binding */ LeadershipPrinciples)\n/* harmony export */ });\n/* harmony import */ var _base_section__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @base/section */ "./src/ts/base/section.ts");\n/* harmony import */ var _sections_leadershiplist_constants_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sections/leadershiplist/constants/types */ "./src/ts/components/sections/leadershiplist/constants/types.ts");\n/* harmony import */ var _sections_leadershiplist_principleitems__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sections/leadershiplist/principleitems */ "./src/ts/components/sections/leadershiplist/principleitems.ts");\n\n\n\n/**\n * My Leadership Principles section of Code Responsibly. Section can be\n * components or contain multiple components.\n * !Sections are qualified by having an id attribute at the parent level or\n * !the first child occurence of the id attribute.\n *\n * <section class=\'panel my-principles\'>\n *   ..\n *     <div id=\'my-principles\'>..</div>\n *   ..\n * </section>\n */\nclass LeadershipPrinciples extends _base_section__WEBPACK_IMPORTED_MODULE_0__.Section {\n    /**\n     * subclassing Section -> Component -> CoreElement.\n     * @param elementID the indentifier to search for regardless of whether the\n     * id attribute is in the section tag or belongs to a child of the section\n     * tag.\n     */\n    constructor(elementID) {\n        super(elementID);\n        this.items = new _sections_leadershiplist_principleitems__WEBPACK_IMPORTED_MODULE_2__.PrincipleItems(_sections_leadershiplist_constants_types__WEBPACK_IMPORTED_MODULE_1__.MY_PRINCIPLES_ELEMENTS.RULES_ITEM);\n    }\n    /**\n     * Intros the animate list, ideally when the section comes into the viewport.\n     */\n    animate() {\n        this.items.intro();\n    }\n}\n\n\n//# sourceURL=webpack://coderesonsibly/./src/ts/components/sections/leadershiplist/leadershipprinciples.ts?')},"./src/ts/components/sections/leadershiplist/principleitems.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PrincipleItems\": () => (/* binding */ PrincipleItems)\n/* harmony export */ });\n/* harmony import */ var _abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @abstract/typeguard */ \"./src/ts/abstract/typeguard.ts\");\n/* harmony import */ var _base_scrollcomponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @base/scrollcomponent */ \"./src/ts/base/scrollcomponent.ts\");\n/* harmony import */ var _sections_leadershiplist_constants_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sections/leadershiplist/constants/types */ \"./src/ts/components/sections/leadershiplist/constants/types.ts\");\n\n\n\n/**\n * PrincipleItems are siblings to the parent component that share the same tag\n * structure. Checks for when a single element enters into the viewport via\n * IntersectionObserver, and animates in various elements that make up a single\n * Principle Item.\n */\nclass PrincipleItems extends _base_scrollcomponent__WEBPACK_IMPORTED_MODULE_1__.ScrollComponent {\n    /**\n     * subclassing ScrollComponent -> Component -> CoreElement.\n     * @param elementID the indentifier to search for marking the main container\n     * of the component.\n     */\n    constructor(elementID = '') {\n        super(elementID);\n    }\n    /**\n     * Animates any necessary elements.\n     * @todo interface this method (implments IPrincipleItem)\n     */\n    intro() {\n        /** */\n    }\n    /**\n     * Handle all functionality needed to appropriately initialized the\n     * component. For PrincipeItems, we fetch all SVGs and set the correct\n     * size after the font is applied to the text tag.\n     * !SVG  width and height attributes cannot be predetermined in\n     * !the HTML due to the font / bounding box varying for each text tag.\n     * !Obviously, every svg tag should alwyas have a width/height attribute.\n     */\n    init() {\n        super.init();\n        this.svgs = _abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.guardForNull(document.querySelectorAll(_sections_leadershiplist_constants_types__WEBPACK_IMPORTED_MODULE_2__.MY_PRINCIPLES_ELEMENTS.SVGS));\n        this.repositionSVGTextBox();\n    }\n    /**\n     * The handler that checks for when an entry enters into the viewport at\n     * 20% visibility. Animates in the Index Number, the Title, and Copy that\n     * make up the elements of a Single Principle Item.\n     * @param entries A series of items the IntersectionObserver is aware of.\n     * @param observer the IntersectionObserver that chekcs for entries entering\n     * into the viewport.\n     */\n    observerCallbackHandler(entries, observer) {\n        entries.map((entry) => {\n            if (entry.intersectionRatio >= 0.2) {\n                const elementTarget = _abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.assertInstance(HTMLElement, entry.target);\n                const principleNumber = _abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.guardForNull(elementTarget.querySelector(_sections_leadershiplist_constants_types__WEBPACK_IMPORTED_MODULE_2__.MY_PRINCIPLES_ELEMENTS.SVG_NUMBER));\n                const principleText = _abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.guardForNull(elementTarget.querySelector(_sections_leadershiplist_constants_types__WEBPACK_IMPORTED_MODULE_2__.MY_PRINCIPLES_ELEMENTS.HEADLINE_TEXT));\n                const principleCopy = _abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.guardForNull(elementTarget.querySelector(_sections_leadershiplist_constants_types__WEBPACK_IMPORTED_MODULE_2__.MY_PRINCIPLES_ELEMENTS.COPY_TEXT));\n                principleNumber.style.animationPlayState = 'running';\n                principleText.style.animationPlayState = 'running';\n                principleCopy.style.animationPlayState = 'running';\n            }\n        });\n    }\n    /**\n     * Aligns SVGs to the baseline by setting the appropriate width and height\n     * on every svg tag after the font renders the text tag.\n     *\n     * !SVGs are used for the index number of the principle in view.  The width\n     * ! and height are different for every SVG. We figure it out after it's\n     * ! been applied due to font of SVG varying the the width and height.\n     */\n    repositionSVGTextBox() {\n        for (const el of this.svgs) {\n            const bbox = el.getBBox();\n            el.setAttribute('width', bbox.width + 'px');\n            el.setAttribute('height', el.clientHeight + 8 + 'px');\n        }\n    }\n}\n\n\n//# sourceURL=webpack://coderesonsibly/./src/ts/components/sections/leadershiplist/principleitems.ts?")},"./src/ts/components/sections/personals/infogrid.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"InfoGrid\": () => (/* binding */ InfoGrid)\n/* harmony export */ });\n/* harmony import */ var _base_scrollcomponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @base/scrollcomponent */ \"./src/ts/base/scrollcomponent.ts\");\n\n/**\n * InfoGrid represents the grid items in The Personals section of the site.\n * Children of the parent component that share the same tag\n * structure. Checks for when a single element enters into the viewport via\n * IntersectionObserver, and animates in various elements that make up a single\n * Grid Item.\n */\nclass InfoGrid extends _base_scrollcomponent__WEBPACK_IMPORTED_MODULE_0__.ScrollComponent {\n    /**\n     * subclassing ScrollComponent -> Component -> CoreElement.\n     * @param elementID the indentifier to search for marking the main container\n     * of the component.\n     */\n    constructor(elementID) {\n        super(elementID);\n        this.observerOptions = {\n            rootMargin: '0px 0px 0px 0px',\n            threshold: [0, 0.25, 0.5, 0.75, 1],\n        };\n        this.init();\n    }\n    /**\n     * Animates any necessary elements.\n     * @todo interface this method (implments IPrincipleItem)\n     */\n    intro() {\n        /** */\n    }\n    /**\n     * The handler that checks for when an entry enters into the viewport at\n     * 25% visibility. Loops through ever element\n     * @param entries A series of items the IntersectionObserver is aware of.\n     * @param observer the IntersectionObserver that chekcs for entries entering\n     * into the viewport.\n     */\n    observerCallbackHandler(entries, observer) {\n        entries.map((entry) => {\n            if (entry.intersectionRatio >= 0.25) {\n                const items = entry.target.querySelectorAll(':scope > span, li');\n                let delay = 0;\n                for (const item of items) {\n                    item.style.animationDelay = delay + 's';\n                    item.style.animationPlayState = 'running';\n                    delay += 0.12;\n                }\n            }\n        });\n    }\n}\n\n\n//# sourceURL=webpack://coderesonsibly/./src/ts/components/sections/personals/infogrid.ts?")},"./src/ts/components/sections/personals/personals.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Personals": () => (/* binding */ Personals)\n/* harmony export */ });\n/* harmony import */ var _base_section__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @base/section */ "./src/ts/base/section.ts");\n/* harmony import */ var _sections_personals_infogrid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sections/personals/infogrid */ "./src/ts/components/sections/personals/infogrid.ts");\n\n\n/**\n * Data structure representing section-specific style classes.\n */\nvar TOPFIVEGRID_ELEMENTS;\n(function (TOPFIVEGRID_ELEMENTS) {\n    TOPFIVEGRID_ELEMENTS["MAIN_GRID"] = ".column-grid";\n    TOPFIVEGRID_ELEMENTS["COLUMN"] = ".column-grid .info-column";\n})(TOPFIVEGRID_ELEMENTS || (TOPFIVEGRID_ELEMENTS = {}));\n/**\n * The Personals section of Code Responsibly. Section can be components or\n * contain multiple components.\n * !Sections are qualified by having an id attribute at the parent level or\n * !the first child occurence of the id attribute.\n *\n * <section class=\'panel personals\'>\n *   ..\n *     <div id=\'personals\'>..</div>\n *   ..\n * </section>\n */\nclass Personals extends _base_section__WEBPACK_IMPORTED_MODULE_0__.Section {\n    /**\n     * subclassing Section -> Component -> CoreElement.\n     * @param elementID the indentifier to search for regardless of whether the\n     * id attribute is in the section tag or belongs to a child of the section\n     * tag.\n     */\n    constructor(elementID) {\n        super(elementID);\n        this.gridItems = new _sections_personals_infogrid__WEBPACK_IMPORTED_MODULE_1__.InfoGrid(TOPFIVEGRID_ELEMENTS.COLUMN);\n    }\n}\n\n\n//# sourceURL=webpack://coderesonsibly/./src/ts/components/sections/personals/personals.ts?')},"./src/ts/components/sections/workhistory/companyanimations.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CompanyAnimations\": () => (/* binding */ CompanyAnimations)\n/* harmony export */ });\n/* harmony import */ var _abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @abstract/typeguard */ \"./src/ts/abstract/typeguard.ts\");\n/* harmony import */ var _base_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @base/component */ \"./src/ts/base/component.ts\");\n/* harmony import */ var _base_overlayanimation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @base/overlayanimation */ \"./src/ts/base/overlayanimation.ts\");\n\n\n\n/**\n * CompanyAnimations represents the company elements in the grid of the Work\n * History section of the site. Children of the parent component that share\n * the same tag structure.\n *\n * Sets queue capable functionality for when a user clicks(desktop / mobile),\n * hovers on and off the component gracefully manages animation and\n * transitions to prevent skips or jumps for when a user hovers on and off\n * quickly or clicks repeatedly on the element during transition/animation.\n *\n * !This purposely uses style.transform for transitions and classes for\n * !animations to showcase an age old CSS problem of how to queue\n * !transitions and animations and prevent user breaks.\n * !For example of css transition-based(not animation) class property\n * !handling, please review SingleTransition.ts\n */\nclass CompanyAnimations extends _base_component__WEBPACK_IMPORTED_MODULE_1__.Component {\n    /**\n     * subclassing Component -> CoreElement.\n     * @param elementID the indentifier to search for marking the main container\n     * of the component.\n     */\n    constructor(elementID) {\n        super(elementID);\n        this.companies = [];\n        this.init();\n    }\n    /**\n     * Animates in the companies in a grid with a delay.\n     */\n    intro() {\n        let delay = 0.35;\n        for (let i = 0; i < this.companies.length; i++) {\n            this.companies[i].intro(delay);\n            delay += 0.35;\n        }\n    }\n    /**\n     * Special case of when the theme updates, this component will need\n     * to update image paths to update theme specific images.\n     *\n     * !Filter combinations of saturate, brightness, etc. did not give the\n     * !desired effects so falling back on images for the best assets\n     * !to align to the color schemes of a theme.\n     * @param theme a theme from the Theme Manager or a string value that matches\n     * themes that are defined in CSS Variables.\n     */\n    updateTheme(theme) {\n        const r = _abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.cast(document.querySelector('section[data-theme=' + theme + ']'));\n        const rs = getComputedStyle(r);\n        const path = _abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.cast(rs\n            .getPropertyValue('--career-grid-company-asset-path')\n            .replace(/['\"]+/g, '')\n            .trim());\n        for (let i = 0; i < this.companies.length; i++) {\n            this.companies[i].update(theme, path);\n        }\n    }\n    /**\n     * method to handle all functionality needed to appropriately initialized\n     * the component.\n     */\n    init() {\n        this.preventRepaintReflow();\n    }\n    /**\n     * Called once to hold onto elements the component needs to prevent\n     * further dom calls that could result in repaint or reflow.\n     *\n     * Loops through all the containers and creates instanecs of\n     * OverlayAnimation. Assigns all the properties needed for\n     * OverlayAnimation to deliver transition and animation styling\n     * simultaneously.\n     */\n    preventRepaintReflow() {\n        const containers = this.getAllContainers();\n        for (let i = 0; i < containers.length; i++) {\n            this.companies[i] = new _base_overlayanimation__WEBPACK_IMPORTED_MODULE_2__.OverlayAnimation();\n            this.companies[i].basePath = '/assets/work-history';\n            this.companies[i].rollOverTransitionStyle =\n                'rotateX(15deg) rotateY(15deg)';\n            this.companies[i].rollOutTransitionStyle = 'rotateX(0deg) rotateY(0deg)';\n            this.companies[i].introAnimationClass = 'company-intro';\n            this.companies[i].rollOverAnimationClass = 'company-rollover';\n            this.companies[i].rollOutAnimationClass = 'company-rollout';\n            this.companies[i].container = { head: containers[i] };\n        }\n    }\n}\n\n\n//# sourceURL=webpack://coderesonsibly/./src/ts/components/sections/workhistory/companyanimations.ts?")},"./src/ts/components/sections/workhistory/workhistory.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"WorkHistory\": () => (/* binding */ WorkHistory)\n/* harmony export */ });\n/* harmony import */ var _base_section__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @base/section */ \"./src/ts/base/section.ts\");\n/* harmony import */ var _sections_workhistory_companyanimations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sections/workhistory/companyanimations */ \"./src/ts/components/sections/workhistory/companyanimations.ts\");\n/* harmony import */ var _base_singletransition__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @base/singletransition */ \"./src/ts/base/singletransition.ts\");\n\n\n\n/**\n * Data structure of all possible tag & class references required\n * to componetize the the Work History Section.\n */\nvar WORKGRID_ELEMENTS;\n(function (WORKGRID_ELEMENTS) {\n    WORKGRID_ELEMENTS[\"HAIRSTYLE\"] = \".hairstyle-holder\";\n    WORKGRID_ELEMENTS[\"COMPANIES\"] = \".new-job-holder .company-img-container\";\n})(WORKGRID_ELEMENTS || (WORKGRID_ELEMENTS = {}));\n/**\n * Work History section of Code Responsibly. Section can be components or\n * contain multiple components.\n * !Sections are qualified by having an id attribute at the parent level or\n * !the first child occurence of the id attribute.\n *\n * <section class='panel work-history'>\n *   ..\n *     <div id='work-history'>..</div>\n *   ..\n * </section>\n */\nclass WorkHistory extends _base_section__WEBPACK_IMPORTED_MODULE_0__.Section {\n    /**\n     * subclassing Section -> Component -> CoreElement.\n     * @param elementID the indentifier to search for regardless of whether the\n     * id attribute is in the section tag or belongs to a child of the section\n     * tag.\n     */\n    constructor(elementID) {\n        super(elementID);\n        this.transforms = [\n            { transform: 'rotateY(200deg) scale(1)' },\n            { transform: 'rotateX(180deg) translate(0, -10px)' },\n            { transform: 'rotateY(-200deg) scale(1)' },\n            { transform: 'rotateX(-180deg) scale(1)' },\n            { transform: 'rotateX(44deg) rotateZ(325deg)' },\n            { transform: 'rotateY(180deg) rotateX(44deg) rotateZ(325deg)' },\n            { transform: 'rotateX(24deg) rotateZ(180deg)' },\n            { transform: 'rotateX(55deg) rotateZ(270deg)' },\n            { transform: 'rotateZ(180deg)' },\n            { transform: 'rotateZ(270deg)' },\n        ];\n        this.hairstyles = new _base_singletransition__WEBPACK_IMPORTED_MODULE_2__.SingleTransition(WORKGRID_ELEMENTS.HAIRSTYLE);\n        this.init();\n    }\n    /**\n     * The companies in grid are asked to animate in.\n     * !The main app overseeing scrolling behavior calls this method\n     * !for When this section comes intov view\n     */\n    animate() {\n        this.companies.intro();\n    }\n    /**\n     * Special behavior given to this section as updating theme will not only\n     * result in the background color changing, but specific images updates to\n     * match the theme.\n     * @param theme the specific color scheme used at the app-level.\n     */\n    updateTheme(theme) {\n        if (!this.companies) {\n            this.companies = new _sections_workhistory_companyanimations__WEBPACK_IMPORTED_MODULE_1__.CompanyAnimations(WORKGRID_ELEMENTS.COMPANIES);\n        }\n        this.companies.updateTheme(theme);\n    }\n    /**\n     * method to handle all functionality needed to appropriately initialized\n     * the component. Hairstyles in the work grid are fed the pool of possible\n     * transitions for random Mouse Over actions.\n     */\n    init() {\n        this.hairstyles.resetTransitionStyle =\n            'scale(1) translate(0,0) rotateY(0deg) rotateX(0deg) rotateZ(0deg)';\n        for (let i = 0; i < this.transforms.length; i++) {\n            this.hairstyles.createTransitions(this.transforms[i]);\n        }\n    }\n}\n\n\n//# sourceURL=webpack://coderesonsibly/./src/ts/components/sections/workhistory/workhistory.ts?")},"./src/ts/components/thememanager/events/themeevent.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ThemeEvent\": () => (/* binding */ ThemeEvent)\n/* harmony export */ });\n/**\n * Custom Event Class For The Theme Manager to notify the main app of updates.\n * A Proper Example to extend Custom Event to dispatch Events with instantiable\n * custom types. Meant to meet strict ES6 rules.\n */\nclass ThemeEvent extends CustomEvent {\n    /**\n     * Instantiate similarily to CustomEvent\n     * @param typeName the type name should be the reasonly properties\n     * in this class.\n     * @param init optional. Takes the subclass of CustomEventInit to meet\n     * the super class constructor defition.\n     */\n    constructor(typeName, init) {\n        super(typeName, init);\n        if (init) {\n            this.init = init;\n        }\n    }\n}\n// Dispatchable Event Type\nThemeEvent.UPDATE = 'theme-applied';\nThemeEvent.RANDOM_THEMES_SET = 'random-themes-set';\nThemeEvent.RANDOM_THEMES_SET_COMPLETE = 'random-theme-set-complete';\n\n\n//# sourceURL=webpack://coderesonsibly/./src/ts/components/thememanager/events/themeevent.ts?")},"./src/ts/components/thememanager/thememanager.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ThemeManager\": () => (/* binding */ ThemeManager)\n/* harmony export */ });\n/* harmony import */ var _abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @abstract/typeguard */ \"./src/ts/abstract/typeguard.ts\");\n/* harmony import */ var _base_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @base/component */ \"./src/ts/base/component.ts\");\n/* harmony import */ var _components_thememanager_events_themeevent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @components/thememanager/events/themeevent */ \"./src/ts/components/thememanager/events/themeevent.ts\");\n\n\n\n/**\n * Each entry holds the index of a theme valued defined in The CSS variables.\n * There are certain themes that look great with certain sections, and certain\n * themes to avoid. For example, the last item in every array is the value of 1\n * which represents 'theme-1'. The last section (an element with an id\n * attribute or the parene element of an element with an id attribute) will\n * always have theme-1 colors applied to it.\n */\nconst ThemeMap = [\n    [1, 1, 1, 1, 1, 1, 1],\n    [2, 11, 11, 11, 11, 2, 1],\n    [3, 9, 9, 9, 9, 9, 1],\n    [6, 1, 1, 1, 1, 1, 1],\n    [7, 8, 8, 8, 8, 7, 1],\n];\n/**\n * Each entry holds the index of a theme valued defined in The CSS variables.\n * These are secondary themes that will only set when the user requests through\n * some kind of interaction post-site-load to rotate through the full set\n * of themes that include the ThemeMap + ClickThruThemeMap.\n */\nconst ClickThruThemeMap = [\n    [4, 10, 10, 10, 10, 10, 1],\n    [7, 7, 8, 7, 7, 7, 1],\n];\n/**\n * ThemeManager updates and manages the current theme style passed in and\n * allows for random sets of themes to be assigned.\n */\nclass ThemeManager extends _base_component__WEBPACK_IMPORTED_MODULE_1__.Component {\n    /**\n     * subclassing Component -> CoreElement.\n     * The component is indepedent of a decorator requirement.\n     */\n    constructor() {\n        super();\n        this.randomThemes = [];\n        this.clickThruThemes = [];\n        this.preventRepaintReflow();\n        this.shuffle();\n    }\n    /**\n     * shuffles the the the ThemeMap prior to appliation or\n     * re-application.\n     */\n    shuffle() {\n        this.seriesPointer = 0;\n        this.randomThemes = [];\n        const orderedThemes = [];\n        for (let i = 0; i < ThemeMap.length; i++) {\n            orderedThemes.push(i);\n        }\n        for (let i = 0; i < ThemeMap.length; i++) {\n            const random = Math.floor(Math.random() * orderedThemes.length);\n            this.setThemeSeries(orderedThemes[random]);\n            orderedThemes.splice(random, 1);\n        }\n        const secondaryThemes = [];\n        for (let i = 0; i < ClickThruThemeMap.length; i++) {\n            secondaryThemes.push(i);\n        }\n        this.clickThruThemes = [...this.randomThemes];\n        for (let k = 0; k < ClickThruThemeMap.length; k++) {\n            const random = Math.floor(Math.random() * secondaryThemes.length);\n            this.clickThruThemeSeries(secondaryThemes[random]);\n        }\n    }\n    /**\n     * Looks at an index of the ThemeMap, stringifys the values that map back to\n     * the defined themes in CSS global variables, and adds them to a array,\n     * randomThemes, which will be used by the ThemeManager until reshuffling\n     * (shuffle) happens.\n     * @param index the pointer or index of ThemeMap.\n     */\n    setThemeSeries(index) {\n        const themeSet = [];\n        for (let i = 0; i < ThemeMap[index].length; i++) {\n            themeSet[i] = this.themePrefix + ThemeMap[index][i];\n        }\n        const obj = { theme: themeSet };\n        this.randomThemes.push(obj);\n    }\n    /**\n     * Looks at an index of the ClickThruThemeMap, stringifys the values that\n     * map back to the defined themes in CSS global variables, and adds them\n     * to a array, clickThruThemes, which are themes not available for random\n     * load, but available if the user decides to change themes through some\n     * sort of click action.\n     * @param index the pointer or index of ThemeMap.\n     */\n    clickThruThemeSeries(index) {\n        const themeSet = [];\n        for (let i = 0; i < ClickThruThemeMap[index].length; i++) {\n            themeSet[i] = this.themePrefix + ClickThruThemeMap[index][i];\n        }\n        const obj = { theme: themeSet };\n        this.clickThruThemes.push(obj);\n    }\n    /**\n     * Checks to see if the currentTheme being attached is not same as what is\n     * already set at the element data attribute tag. If the values match,\n     * randomize the set until a new theme will be applied.\n     */\n    applyRandomThemeTo(element) {\n        const elementTheme = _abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.guardForNull(element.dataset.theme);\n        if (this.currentTheme == elementTheme) {\n            this.randomize(true);\n            return;\n        }\n        this.updateTheme(elementTheme);\n    }\n    /**\n     * sets the html-level data attribut tag to the elements theme and notifies\n     * the app that an ThemeEvent.UPDATE has occured.\n     * @param elementTheme the element's data attribute theme or any of the\n     * theme styles set in the CSS global variables.\n     */\n    updateTheme(elementTheme) {\n        if (this.currentTheme == elementTheme) {\n            return;\n        }\n        document.documentElement.setAttribute('data-theme', elementTheme);\n        this.currentTheme = elementTheme;\n        this.dispatchEvent(new _components_thememanager_events_themeevent__WEBPACK_IMPORTED_MODULE_2__.ThemeEvent(_components_thememanager_events_themeevent__WEBPACK_IMPORTED_MODULE_2__.ThemeEvent.UPDATE));\n    }\n    /**\n     * Fetches all the elements (Sections) with a  data theme attributes set,\n     * and assigns the next set of Themes available in the map to each element\n     * identified.\n     * The method notifies the main app that themes have been written to the HTML\n     * hy dispatching ThemeEvent.RANDOM_THEMES_SET.\n     */\n    randomize(selectFromAllThemes = false) {\n        const sections = document.querySelectorAll('[data-theme]');\n        if (sections === null ||\n            (sections instanceof NodeList && sections.length === 0)) {\n            return;\n        }\n        const series = this.getNextThemeSet(selectFromAllThemes);\n        let k = 0;\n        // Skipping HTML Tag [data-theme] Attribute\n        for (let i = 1; i < sections.length; i++) {\n            sections[i].setAttribute('data-theme', series.theme[k]);\n            if (k < series.theme.length) {\n                k++;\n            }\n            else {\n                k = 0;\n            }\n        }\n        this.dispatchEvent(new _components_thememanager_events_themeevent__WEBPACK_IMPORTED_MODULE_2__.ThemeEvent(_components_thememanager_events_themeevent__WEBPACK_IMPORTED_MODULE_2__.ThemeEvent.RANDOM_THEMES_SET));\n    }\n    /**\n     * Retrieves the next randomized set in randomThemes. If the pointer reaches\n     * the end of randomThemes, we go in circular selection and start at the\n     * beginning.\n     * !Reshuffling (shuffle method) would shuffle the randomeThemes array and\n     * !reset the pointer.\n     * @returns a data structure of ready to go stringfied values that\n     * can be applied to the data-theme attribute at the element level.\n     */\n    getNextThemeSet(includeClickThruThemes = false) {\n        this.seriesPointer++;\n        let properThemes = this.randomThemes;\n        if (includeClickThruThemes == true) {\n            properThemes = this.clickThruThemes;\n        }\n        if (this.seriesPointer >= properThemes.length) {\n            this.seriesPointer = 0;\n        }\n        return properThemes[this.seriesPointer];\n    }\n    /**\n     * Checks if the next theme being applied is already the currnt theme. If so,\n     * we skip over it and check once again until it has exhausted the rest of\n     * themes available in the currently-pointed randomeThemes series.\n     * @returns the next theme within a theme set. (a pointer in ramdomThemes).\n     */\n    getNextTheme() {\n        const currentThemeSet = this.randomThemes[this.seriesPointer];\n        let k = 0;\n        for (let i = 0; i < currentThemeSet.theme.length; i++) {\n            if (this.currentTheme == currentThemeSet.theme[i]) {\n                k = i + 1;\n                if (k < currentThemeSet.theme.length &&\n                    this.currentTheme != currentThemeSet.theme[k]) {\n                    return currentThemeSet.theme[k];\n                }\n            }\n            else {\n                return currentThemeSet.theme[i];\n            }\n        }\n        return undefined;\n    }\n    /**\n     * Called once to hold onto elements the section needs to prevent\n     * further dom calls that could result in repaint or reflow.\n     */\n    preventRepaintReflow() {\n        const r = _abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.cast(document.querySelector('html'));\n        const rs = getComputedStyle(_abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.cast(r));\n        this.themePrefix = rs\n            .getPropertyValue('--theme-prefix')\n            .replace(/['\"]+/g, '')\n            .trim();\n        this.totalNumberThemes = Number(rs.getPropertyValue('--total-themes'));\n        this.currentTheme = _abstract_typeguard__WEBPACK_IMPORTED_MODULE_0__.TypeGuard.guardForNull(document.documentElement.getAttribute('data-theme'));\n    }\n    /**\n     * Allows for reverse lookup by returning the index of a theme to check\n     * against the ThemeMap or where else applicable.\n     * @param theme the string value that includes an index as a prefix.\n     * @returns the index attached to the theme.\n     * !Asumes the index is the last character of the string.\n     */\n    getThemeIndex(theme) {\n        let index;\n        if (theme.includes(this.themePrefix)) {\n            index = theme.substring(theme.length - 1, theme.length);\n            return index;\n        }\n        return undefined;\n    }\n}\n\n\n//# sourceURL=webpack://coderesonsibly/./src/ts/components/thememanager/thememanager.ts?")}},__webpack_module_cache__={},inProgress,dataWebpackPrefix;function __webpack_require__(e){var n=__webpack_module_cache__[e];if(void 0!==n)return n.exports;var t=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](t,t.exports,__webpack_require__),t.exports}__webpack_require__.m=__webpack_modules__,__webpack_require__.d=(e,n)=>{for(var t in n)__webpack_require__.o(n,t)&&!__webpack_require__.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},__webpack_require__.f={},__webpack_require__.e=e=>Promise.all(Object.keys(__webpack_require__.f).reduce(((n,t)=>(__webpack_require__.f[t](e,n),n)),[])),__webpack_require__.u=e=>"js/"+e+".bundle.js",__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),__webpack_require__.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),inProgress={},dataWebpackPrefix="coderesonsibly:",__webpack_require__.l=(e,n,t,s)=>{if(inProgress[e])inProgress[e].push(n);else{var a,o;if(void 0!==t)for(var i=document.getElementsByTagName("script"),r=0;r<i.length;r++){var _=i[r];if(_.getAttribute("src")==e||_.getAttribute("data-webpack")==dataWebpackPrefix+t){a=_;break}}a||(o=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,__webpack_require__.nc&&a.setAttribute("nonce",__webpack_require__.nc),a.setAttribute("data-webpack",dataWebpackPrefix+t),a.src=e),inProgress[e]=[n];var c=(n,t)=>{a.onerror=a.onload=null,clearTimeout(h);var s=inProgress[e];if(delete inProgress[e],a.parentNode&&a.parentNode.removeChild(a),s&&s.forEach((e=>e(t))),n)return n(t)},h=setTimeout(c.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=c.bind(null,a.onerror),a.onload=c.bind(null,a.onload),o&&document.head.appendChild(a)}},__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;__webpack_require__.g.importScripts&&(e=__webpack_require__.g.location+"");var n=__webpack_require__.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var t=n.getElementsByTagName("script");t.length&&(e=t[t.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),__webpack_require__.p=e+"../"})(),(()=>{var e={index:0};__webpack_require__.f.j=(n,t)=>{var s=__webpack_require__.o(e,n)?e[n]:void 0;if(0!==s)if(s)t.push(s[2]);else{var a=new Promise(((t,a)=>s=e[n]=[t,a]));t.push(s[2]=a);var o=__webpack_require__.p+__webpack_require__.u(n),i=new Error;__webpack_require__.l(o,(t=>{if(__webpack_require__.o(e,n)&&(0!==(s=e[n])&&(e[n]=void 0),s)){var a=t&&("load"===t.type?"missing":t.type),o=t&&t.target&&t.target.src;i.message="Loading chunk "+n+" failed.\n("+a+": "+o+")",i.name="ChunkLoadError",i.type=a,i.request=o,s[1](i)}}),"chunk-"+n,n)}};var n=(n,t)=>{var s,a,[o,i,r]=t,_=0;if(o.some((n=>0!==e[n]))){for(s in i)__webpack_require__.o(i,s)&&(__webpack_require__.m[s]=i[s]);r&&r(__webpack_require__)}for(n&&n(t);_<o.length;_++)a=o[_],__webpack_require__.o(e,a)&&e[a]&&e[a][0](),e[a]=0},t=self.webpackChunkcoderesonsibly=self.webpackChunkcoderesonsibly||[];t.forEach(n.bind(null,0)),t.push=n.bind(null,t.push.bind(t))})();var __webpack_exports__=__webpack_require__("./src/ts/app.ts")})();