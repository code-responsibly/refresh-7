/*! For license information please see firestorefetch.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkcoderesonsibly=self.webpackChunkcoderesonsibly||[]).push([["firestorefetch"],{"./src/ts/components/firestorefetch/firestorefetch.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "FETCH_PROPERTIES": () => (/* binding */ FETCH_PROPERTIES),\n/* harmony export */   "FirestoreFetch": () => (/* binding */ FirestoreFetch)\n/* harmony export */ });\n/* harmony import */ var firebase_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/app */ "./node_modules/firebase/app/dist/esm/index.esm.js");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/firestore */ "./node_modules/firebase/firestore/dist/esm/index.esm.js");\n/* harmony import */ var firebase_auth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! firebase/auth */ "./node_modules/firebase/auth/dist/esm/index.esm.js");\n/* harmony import */ var firebase_analytics__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! firebase/analytics */ "./node_modules/firebase/analytics/dist/esm/index.esm.js");\n/* harmony import */ var _components_firestorefetch_events_firebaseevent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @components/firestorefetch/events/firebaseevent */ "./src/ts/components/firestorefetch/events/firebaseevent.ts");\n/* harmony import */ var _abstract_typeguard__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @abstract/typeguard */ "./src/ts/abstract/typeguard.ts");\n\n\n\n\n\n\n/**\n * Data structure for properties needed for Firebase.\n */\nvar FETCH_PROPERTIES;\n(function (FETCH_PROPERTIES) {\n    FETCH_PROPERTIES["PATH"] = "downloads";\n    FETCH_PROPERTIES["PATH_SEGMENT"] = "cr-downloads";\n    FETCH_PROPERTIES["LOCAL"] = "Local";\n    FETCH_PROPERTIES["SERVER"] = "Server";\n})(FETCH_PROPERTIES || (FETCH_PROPERTIES = {}));\n/**\n * FirestoreFetch writes and reads the download counter from firebase\n * for the # of times the codebase has been downloaded.\n *\n * ! FirestoreFetch modularizes the firebase libraries and the component is\n * ! broken out as a chunk and loaded indepdently. Please view the main app\n * ! for how FirestoreFetch is loaded and webpack.config for how the splits\n * ! are determined.\n */\nclass FirestoreFetch extends EventTarget {\n    /**\n     * subclassing EventTarget. Sets up the Firebase Config with the required\n     * apikey.\n     *\n     * ! FirebaseConfig should be updated to reflect your own firebase project\n     * ! instance.\n     */\n    constructor() {\n        super();\n        this.userAuthenticated = false;\n        const firebaseConfig = {\n            apiKey: \'AIzaSyDQ7sbhwPjbVGIzC6gDcsihpWMjsECaPlk\',\n            authDomain: \'code-responsibly.firebaseapp.com\',\n            databaseURL: \'https://code-responsibly-default-rtdb.firebaseio.com\',\n            projectId: \'code-responsibly\',\n            storageBucket: \'code-responsibly.appspot.com\',\n            messagingSenderId: \'776885952034\',\n            appId: \'1:776885952034:web:1f5f604c15eddd1610f47b\',\n            measurementId: \'G-SZPH86Q47T\',\n        };\n        this.app = (0,firebase_app__WEBPACK_IMPORTED_MODULE_0__.initializeApp)(firebaseConfig);\n        this.analytics = (0,firebase_analytics__WEBPACK_IMPORTED_MODULE_3__.getAnalytics)(this.app);\n        this.db = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getFirestore)(this.app);\n    }\n    /**\n     * Authenticates the app with an anonymouse user since we\'re only using\n     * Firebase for a download counter.\n     */\n    authenticate() {\n        this.auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_2__.getAuth)(this.app);\n        (0,firebase_auth__WEBPACK_IMPORTED_MODULE_2__.signInAnonymously)(this.auth)\n            .then(() => {\n            // Signed in..\n        })\n            .catch(error => {\n            const errorCode = error.code;\n            const errorMessage = error.message;\n            throw Error(\'Code Responsibly Firebase Error:\' + errorCode + \' - \' + errorMessage);\n        });\n        (0,firebase_auth__WEBPACK_IMPORTED_MODULE_2__.onAuthStateChanged)(this.auth, (user) => this.userAuthenticateHandler(_abstract_typeguard__WEBPACK_IMPORTED_MODULE_5__.TypeGuard.cast(user)));\n    }\n    /**\n     * Retrieves the downloads from the firestore. If the record is successfully\n     * fetched, dispatched event FirebaseEvent lets the main app know and sends\n     * along the download value.\n     */\n    getDownloads() {\n        if (!this.userAuthenticated) {\n            return;\n        }\n        try {\n            (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.onSnapshot)(this.docRef, doc => {\n                const source = doc.metadata.hasPendingWrites\n                    ? FETCH_PROPERTIES.LOCAL\n                    : FETCH_PROPERTIES.SERVER;\n                const docData = _abstract_typeguard__WEBPACK_IMPORTED_MODULE_5__.TypeGuard.guardForNull(doc.data());\n                this.dispatchEvent(new _components_firestorefetch_events_firebaseevent__WEBPACK_IMPORTED_MODULE_4__.FirebaseEvent(_components_firestorefetch_events_firebaseevent__WEBPACK_IMPORTED_MODULE_4__.FirebaseEvent.RECORD_FETCHED, {\n                    detail: {\n                        record: docData.counter,\n                    },\n                }));\n            });\n        }\n        catch (error) {\n            throw \'Code Responsibly -> Could Not Fetch Download Counter.\';\n        }\n    }\n    /**\n     * Writes the download counter, an increment of 1, since this is fired\n     * on click. Dispatched event FirebaseEvent.RECORD_UPDATED notifies the main\n     * app that the value has been updated.\n     */\n    async codebaseDownloaded() {\n        try {\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(this.docRef, {\n                counter: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.increment)(1),\n            });\n            this.dispatchEvent(new _components_firestorefetch_events_firebaseevent__WEBPACK_IMPORTED_MODULE_4__.FirebaseEvent(_components_firestorefetch_events_firebaseevent__WEBPACK_IMPORTED_MODULE_4__.FirebaseEvent.RECORD_UPDATED));\n        }\n        catch (error) {\n            throw \'Code Responsibly -> Could Not write the counter to Firebase\';\n        }\n    }\n    /**\n     * Handler that sets up the firebase document reference once the user\n     * has successfully authenticated. Dispatched event\n     * FirebaseEvent.Authenticated notifies the main app that authentication\n     * was successful.\n     * @param user The Firebase User object assigned for anonymouse users.\n     */\n    userAuthenticateHandler(user) {\n        if (user) {\n            this.userId = user.uid;\n            this.userAuthenticated = true;\n            this.docRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(this.db, FETCH_PROPERTIES.PATH, FETCH_PROPERTIES.PATH_SEGMENT);\n            this.dispatchEvent(new _components_firestorefetch_events_firebaseevent__WEBPACK_IMPORTED_MODULE_4__.FirebaseEvent(_components_firestorefetch_events_firebaseevent__WEBPACK_IMPORTED_MODULE_4__.FirebaseEvent.AUTHENTICATED));\n        }\n        else {\n            this.userAuthenticated = false;\n        }\n    }\n}\n\n\n//# sourceURL=webpack://coderesonsibly/./src/ts/components/firestorefetch/firestorefetch.ts?')}}]);